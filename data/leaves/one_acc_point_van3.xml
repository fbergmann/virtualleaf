<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  $Rev$:  Revision of last commit
  $Author$:  Author of last commit
  $Source$:  Source file
  $Date$:  Date of last commit

  This file is part of the Virtual Leaf.

  The Virtual Leaf is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  The Virtual Leaf is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.

  Copyright 2010 Roeland Merks.
-->
<leaf name="/Users/roel/VirtualLeaf/one_acc_point_van3.xml" date="Thu Feb 14 16:43:58 2008" simtime="57900">
  <parameter>
    <par name="arrowcolor" val="white"/>
    <par name="arrowsize" val="10"/>
    <par name="textcolor" val="red"/>
    <par name="cellnumsize" val="40"/>
    <par name="nodenumsize" val="20"/>
    <par name="node_mag" val="20"/>
    <par name="outlinewidth" val="10"/>
    <par name="cell_outline_color" val="forestgreen"/>
    <par name="T" val="1"/>
    <par name="lambda_length" val="100"/>
    <par name="lambda_celllength" val="0"/>
    <par name="target_length" val="60"/>
    <par name="cell_expansion_rate" val="0.01"/>
    <par name="cell_div_expansion_rate" val="0"/>
    <par name="ode_accuracy" val="0.0001"/>
    <par name="mc_stepsize" val="0.4"/>
    <par name="mc_cell_stepsize" val="0.2"/>
    <par name="energy_threshold" val="5000"/>
    <par name="bend_lambda" val="0"/>
    <par name="alignment_lambda" val="0"/>
    <par name="rel_cell_div_threshold" val="2"/>
    <par name="rel_perimeter_stiffness" val="2"/>
    <par name="collapse_node_threshold" val="0.05"/>
    <par name="morphogen_div_threshold" val="0.2"/>
    <par name="morphogen_expansion_threshold" val="0.01"/>
    <par name="copy_wall" val="true"/>
    <par name="source" val="0"/>
    <par name="D">
      <valarray>
        <val v="1e-06"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </valarray>
    </par>
    <par name="initval">
      <valarray>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </valarray>
    </par>
    <par name="k1" val="0.0002"/>
    <par name="k2" val="1e-07"/>
    <par name="r" val="500"/>
    <par name="kr" val="100"/>
    <par name="km" val="100"/>
    <par name="Pi_tot" val="1"/>
    <par name="transport" val="0.08"/>
    <par name="ka" val="1"/>
    <par name="aux1transport" val="0.003"/>
    <par name="kaux1" val="1"/>
    <par name="aux_cons" val="0"/>
    <par name="aux_breakdown" val="0"/>
    <par name="pin_prod" val="1e-05"/>
    <par name="pin_prod_in_epidermis" val="0.0001"/>
    <par name="pin_breakdown" val="1e-08"/>
    <par name="aux1prod" val="0.0001"/>
    <par name="aux1prodmeso" val="0"/>
    <par name="aux1decay" val="1e-05"/>
    <par name="kap" val="0.1"/>
    <par name="leaf_tip_source" val="1e-05"/>
    <par name="sam_efflux" val="1"/>
    <par name="sam_auxin" val="10"/>
    <par name="sam_auxin_breakdown" val="0"/>
    <par name="van3prod" val="0.0001"/>
    <par name="van3autokat" val="0.1"/>
    <par name="van3sat" val="10"/>
    <par name="k2van3" val="1e-07"/>
    <par name="dt" val="0.05"/>
    <par name="rd_dt" val="100"/>
    <par name="datadir" val="oneaccpointdata2"/>
    <par name="movie" val="false"/>
    <par name="nit" val="1000"/>
    <par name="maxt" val="1e+08"/>
    <par name="storage_stride" val="100"/>
    <par name="xml_storage_stride" val="500"/>
    <par name="rseed" val="-1"/>
  </parameter>
  <code name="VirtualLeaf.cpp">#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;cstring&gt;
#include &lt;functional&gt; 
#include &lt;getopt.h&gt;
#include &lt;cerrno&gt;
#include "mesh.h"
#include "parameter.h"
#include "random.h"
#include "pi.h"
#include "cellitem.h"
#ifdef QTGRAPHICS
#include "canvas.h"
#include "cell.h"
#include &lt;qwidget.h&gt;
#include &lt;q3process.h&gt;
#include &lt;qapplication.h&gt;
#include &lt;QDesktopWidget&gt;
#include &lt;QGraphicsScene&gt;
#include &lt;QMessageBox&gt;
//Added by qt3to4:
#include &lt;QMouseEvent&gt;
#endif
#include &lt;unistd.h&gt;
#include &lt;q3textstream.h&gt; 
#ifdef HAVE_QWT
#include "data_plot.h"
#endif
#include &lt;QPalette&gt;
#include &lt;QBrush&gt;
#include &lt;QToolTip&gt;
//#include "reactions.h"

//#include "reactions_auxacc.h"
//#include "reactions_pinaux3.h"
//#include "reactions_aux1.h"
//#define REACTIONS_HEADER "reactions_growth.h"
//#include "reactions_tips_nor.h"
#define _xstr_(s) _str_(s)
#define _str_(s) #s
#include _xstr_(REACTIONS_HEADER)
extern Parameter par;

MainBase *main_window = 0;
double auxin_account = 0.;

#ifdef XFIGGRAPHICS
#define TIMESTEP double Graphics::TimeStep(void)
#endif

//ofstream debug_stream("debug.log");

class PrintNode {
public:
  void operator() (const Node &amp;n) const 
  {
    cerr &lt;&lt; n.Index() &lt;&lt; ": " &lt;&lt; n &lt;&lt;  endl;
  }
};


class EdgeSource {
	
public:
  void operator() (Cell &amp;c) {
		
    if (c.AtBoundaryP()) {
      cerr &lt;&lt; "Cell " &lt;&lt; c.Index() &lt;&lt; " is a source cell.\n";
      c.SetSource(0,par.source);
    } else {
      cerr &lt;&lt; "Cell " &lt;&lt; c.Index() &lt;&lt; " is _not_ a source cell.\n";
    }
  }
	
};

/*class SetArea {
 public:
 void operator() (Cell &amp;c) const {
 c.SetTargetArea(4*c.CalcArea());
 c.SetTargetLength(4*c.Length());
 }
 
 };*/

#ifdef XFIGGRAPHICS
class XFigCell {
public:
  void operator() (Cell &amp;c,std::ostream &amp;os) const {
    c.XFigPrint(os);
  }
};
#endif

class CellInfo {
public:
  void operator() (Cell &amp;c,std::ostream &amp;os) const {
    os &lt;&lt; "Cell " &lt;&lt; c.index &lt;&lt; " says: " &lt;&lt; endl;
    os &lt;&lt; "c.nodes.size() = " &lt;&lt; c.nodes.size() &lt;&lt; endl;
    for (list&lt;Node *&gt;::iterator i=c.nodes.begin();
	 i!=c.nodes.end();
	 i++) {
      cerr &lt;&lt; (*i)-&gt;Index() &lt;&lt; " ";
    }
    cerr &lt;&lt; endl;
  }
};

double PINSum(Cell &amp;c) {
	
	return c.Chemical(1) + c.SumTransporters(1);// + c.ReduceCellAndWalls&lt;double&gt;( complex_PijAj );
	
}

#ifdef QTGRAPHICS
class DrawCell {
public:
  /*void operator() (Cell &amp;c,Graphics &amp;g) const {
    c.Draw(g);
    }*/
  void operator() (Cell &amp;c,QGraphicsScene &amp;canvas, MainBase &amp;m) const {
    if (m.ShowBorderCellsP() || c.Boundary()==Cell::None) {
      if (!m.ShowBoundaryOnlyP() &amp;&amp; !m.HideCellsP()) 
	if (m.ShowToolTipsP()) {
	  QString info_string=QString("Cell %1, chemicals: ( %2, %3, %4, %5)\n %6 of PIN1 at walls.\n Area is %7\n PIN sum is %8\n Circumference is %9\n Boundary type is %10").arg(c.Index()).arg(c.Chemical(0)).arg(c.Chemical(1)).arg(c.Chemical(2)).arg(c.Chemical(3)).arg(c.SumTransporters(1)).arg(c.Area()).arg(PINSum(c)).arg(c.Circumference()).arg(c.BoundaryStr());
					
	  info_string += "\n" + c.printednodelist();
					
	  c.Draw(&amp;canvas, info_string);
	} else {
	  c.Draw(&amp;canvas);
	}
      if (m.ShowCentersP())
	c.DrawCenter(&amp;canvas);
      // if (m.ShowMeshP()) 
      // 	c.DrawNodes(&amp;canvas);
      if (m.ShowFluxesP())
	c.DrawFluxes(&amp;canvas, par.arrowsize);
			
      //c.DrawTriangles(canvas);
    }
    //cerr &lt;&lt; "Area of cell " &lt;&lt; c.Index() &lt;&lt; " is " &lt;&lt; c.Area() &lt;&lt; endl;
  }
	
};
#endif


const char *xfig_header = "#FIG 3.2\nLandscape\nCenter\nInches\nLetter\n100.00\nSingle\n-2\n1200 2\n";

Mesh mesh;
bool batch=false;



#ifdef QTGRAPHICS
void MainBase::Plot(int resize_stride) {
	
  clear();
    
	
  static int count=0;
  if (resize_stride) {
    if ( !((++count)%resize_stride) ) {
      FitLeafToCanvas();
    }
  }
  mesh.LoopCells(DrawCell(),canvas,*this);
	
  if (ShowNodeNumbersP()) 
    mesh.LoopNodes( bind2nd (mem_fun_ref ( &amp;Node::DrawIndex), &amp;canvas ) ) ;
  if (ShowCellNumbersP()) 
    mesh.LoopCells( bind2nd (mem_fun_ref ( &amp;Cell::DrawIndex), &amp;canvas ) ) ;
	
  if (ShowCellAxesP()) 
    mesh.LoopCells( bind2nd (mem_fun_ref ( &amp;Cell::DrawAxis), &amp;canvas ) );
	
  if (ShowCellStrainP()) 
    mesh.LoopCells( bind2nd (mem_fun_ref ( &amp;Cell::DrawStrain), &amp;canvas ) );
	
  if (ShowWallsP())
    //mesh.LoopCells( bind2nd (mem_fun_ref( &amp;Cell::DrawWalls), &amp;canvas ) );
    mesh.LoopWalls( bind2nd( mem_fun_ref( &amp;Wall::Draw ), &amp;canvas ) );
	
  if (ShowMeshP()) 
    mesh.DrawNodes(&amp;canvas);
	
  if (ShowBoundaryOnlyP()) 
    mesh.DrawBoundary(&amp;canvas);
	
	
  // check to see if chemicals emitted by leaf edge diffuse evenly. Yes, they do.
	
  /* 
     Vector mesh_centroid = mesh.Centroid();
     Vector first_moment = mesh.FirstConcMoment(0);
	 
     QCanvasEllipse *disk1 = 0;
     if (disk1==0) {
     disk1 = new QCanvasEllipse ( 50, 50, &amp;canvas );
     disk1-&gt;setBrush( QColor("red") );
     disk1-&gt;setZ(5);
     disk1-&gt;show();
     }
	 
     QCanvasEllipse *disk2 = 0;
     if (disk2==0) {
     disk2=new QCanvasEllipse ( 50, 50, &amp;canvas );
     disk2-&gt;setBrush( QColor("blue") );
     disk2-&gt;setZ(7);
     disk2-&gt;show();
	 
     }
	 
     Vector offset = mesh.Offset();
     double factor = mesh.Factor();
	 
     disk1 -&gt; move((offset.x+mesh_centroid.x)*factor,(offset.y+mesh_centroid.y)*factor);
     disk2 -&gt; move((offset.x+first_moment.x)*factor,(offset.y+first_moment.y)*factor);
	 
  */

  
	if ( ( batch || MovieFramesP() )) {
		
		static int frame = 0;
		// frame numbers are sequential for the most frequently written file type.
		// for the less frequently written file type they match the other type
		if (!(count%par.storage_stride) )  {
		
			stringstream fname;
			fname &lt;&lt; par.datadir &lt;&lt; "/leaf.";
			fname.fill('0');
			fname.width(6);
			//fname &lt;&lt; mesh.getTime() &lt;&lt; ".xml";
			fname &lt;&lt; frame &lt;&lt; ".jpg";
			if (par.storage_stride &lt;= par.xml_storage_stride) {
				frame++;
			}
			
			// Write high-res JPG snapshot every plot step
			Save(fname.str().c_str(), "JPEG",1024,768);
			
		}
	
		if (!(count%par.xml_storage_stride)) {
			stringstream fname;
			fname &lt;&lt; par.datadir &lt;&lt; "/leaf.";
			fname.fill('0');
			fname.width(6);
			fname &lt;&lt; frame &lt;&lt; ".xml";
	
			if (par.xml_storage_stride &lt; par.storage_stride) {
				frame++;
			}
			// Write XML file every ten plot steps
			mesh.XMLSave(fname.str().c_str(), XMLSettingsTree());
		}
		
	}
}
#endif

//double areaunit=0;

void Cell::Flux(double *flux, double *D)  {
	
  // Algorithm according to Rudge &amp; Haseloff 2005
  // (will we need to take cell area into account?)
  // For the time being, we don't: assume cell area is 
  // mainly determined by vacuole.
	
  // loop over cell edges
	
  for (int c=0;c&lt;Cell::nchem;c++) flux[c]=0.;
	
  for (list&lt;Wall *&gt;::iterator i=walls.begin();
       i!=walls.end();
       i++) {
		
		
    // leaf cannot take up chemicals from environment ("no flux boundary")
    if ((*i)-&gt;c2-&gt;BoundaryPolP()) continue;
		
    // calculate edge length 
    // (will later be updated during node displacement for efficiency)
    //double edge_length = (m-&gt;nodes[(*i)-&gt;n1]-m-&gt;nodes[(*i)-&gt;n2]).Norm();
		
    // flux depends on edge length and concentration difference
    for (int c=0;c&lt;Cell::nchem;c++) {
      double phi = (*i)-&gt;length * ( D[c] ) * ( (*i)-&gt;c2-&gt;chem[c] - chem[c] );
			
      if ((*i)-&gt;c1!=this) {
	cerr &lt;&lt; "Warning, bad cells boundary: " &lt;&lt; (*i)-&gt;c1-&gt;index &lt;&lt; ", " &lt;&lt; index &lt;&lt; endl;
      }
			
      flux[c] += phi;
    }    
  }
	
}

INIT {
	
  //Cell &amp;circle=mesh.CircularCell(0,0,10,10);
  if (leaffile) { 
    xmlNode *settings;
    mesh.XMLRead(leaffile, &amp;settings);
    main_window-&gt;XMLReadSettings(settings);
    xmlFree(settings);
    main_window-&gt;UserMessage(QString("Ready. Time is %1").arg(mesh.getTimeHours().c_str()));
		
  } else {
		
    //Cell &amp;circle=mesh.LeafPrimordium(10,50);
    Cell &amp;circle=mesh.CircularCell(0,0,10,10);
    //circle.SetChemical(1,0);
		
    // petiole is auxin sink
    //mesh.getCell(1).SetSource(0,0);
		
    // petiole becomes provascular cell
    //mesh.getCell(1).SetChemical(1,0.6);
		
    circle.SetTargetArea(circle.CalcArea());
    //circle.SetChemical(2,1e-60);
    mesh.SetBaseArea();
		
    circle.SetChemical(1, par.Pi_tot );
    circle.SetChemical(0, 0.);
    //mesh.LoopCells(EdgeSource());
  }
}

TIMESTEP {
	
  static int i=0;
  static int t=0;
  static int ncells;
	
  if (!batch) {
    UserMessage(QString("Time: %1").arg(mesh.getTimeHours().c_str()),0);
  }
	
		
		
  //if (!(i%1000)) 
  //Save(QString("leaf%1.eps").arg(i).ascii(), "PDF");
		
  /* static ofstream *kinematic=0;
     if (kinematic == 0) {
     stringstream kinematic_fname;
     kinematic_fname &lt;&lt; par.datadir &lt;&lt; "/kinematic.dat";
     cerr &lt;&lt; "Writing kinematic data to " &lt;&lt; kinematic_fname.str() &lt;&lt; endl;
			
     kinematic = new ofstream(kinematic_fname.str().c_str());
     }
		
     *kinematic &lt;&lt; t &lt;&lt; " " &lt;&lt; i &lt;&lt; " " &lt;&lt; mesh.Area() &lt;&lt; " " &lt;&lt; mesh.NCells() &lt;&lt; endl;
     */
		 
  ncells=mesh.NCells();
		
				
  double dh;
  //const double en_threshold = 1;
		
  //mesh.RandomlyLoopCells( mem_fun_ref(&amp;Cell::Displace ));
		
  //static bool dumpflag=false;
		
  if(DynamicCellsP()) {
    dh = mesh.DisplaceNodes();
			
			
    //static ofstream enfile("energy.dat");
    //enfile &lt;&lt; i &lt;&lt; " " &lt;&lt; dh &lt;&lt; "\n";
			
    // Only allow for node insertion, cell division and cell growth
    // if the system has equillibrized
    // i.e. cell wall tension equillibrization is much faster
    // than biological processes, including division, cell wall yielding
    // and cell expansion
    mesh.InsertNodes(); // (this amounts to cell wall yielding)
			
    if ( (-dh) &lt; par.energy_threshold) {
				
      mesh.IncreaseCellCapacityIfNecessary();
      mesh.LoopCurrentCells(CellHouseKeeping()); // this includes cell division
				
      // Reaction diffusion	
      TransportFunction *transport_f = new AuxinTransport();
      CellReaction *cellreaction_f = new AuxinAndDifferentiation();
      WallReaction *wall_f = new PIN1Localization();
				
      mesh.ReactDiffuse_New(transport_f, cellreaction_f, wall_f, par.rd_dt);
		
				
      t++;
				
      Plot();
    }
  } else {
			
    TransportFunction *transport_f = new AuxinTransport();
    CellReaction *cellreaction_f = new AuxinAndDifferentiation();
    WallReaction *wall_f = new PIN1Localization();
			
    mesh.ReactDiffuse_New(transport_f, cellreaction_f, wall_f, par.rd_dt);
			
    Plot();
			
  }
		
		
  i++;
  return mesh.getTime();
		
}
		
void Main::Divide(void) {
			
  static Vector axis(1,0,0);
  mesh.IncreaseCellCapacityIfNecessary();
			
  mesh.LoopCurrentCells( bind2nd( mem_fun_ref(&amp;Cell::DivideOverAxis),axis) );
  axis=axis.Perp2D();
  //mesh.LoopCells( mem_fun_ref(&amp;Cell::Divide) );
  Plot();
			
}
				
				
/* Called if a cell is clicked */
void Cell::OnClick(QMouseEvent *e) {
					
  cerr &lt;&lt; "Calling OnClick()\n";
  /*     cerr &lt;&lt; *m-&gt;boundary_polygon;
  //m-&gt;RepairBoundaryPolygon();
  //SetChemical(0,par.cellsource);
  cerr &lt;&lt; "Mesh's centroid: " &lt;&lt; m-&gt;Centroid() &lt;&lt; endl;
  cerr &lt;&lt; "First moment of chem[0]: " &lt;&lt; m-&gt;FirstConcMoment(0) &lt;&lt; endl;
					 
  */
  /* 
     cerr &lt;&lt; "Cell: " &lt;&lt; Index() &lt;&lt; ", has walls: ";
					 
     for (list&lt;Wall *&gt;::const_iterator w=walls.begin();
     w!=walls.end();
     w++) {
     cerr &lt;&lt; **w &lt;&lt; " ";
     }
					 
     cerr &lt;&lt; endl;
  */
  /* cerr &lt;&lt; "Cell: " &lt;&lt; Index() &lt;&lt; ", has neighbors: ";
					 
  for (list&lt;Cell *&gt;::const_iterator c=neighbors.begin();
  c!=neighbors.end();
  c++) {
  cerr &lt;&lt; (*c)-&gt;Index() &lt;&lt; " ";
  }
					 
  cerr &lt;&lt; endl;*/
					
  /*
    mesh.PrintWallList();
  */
					
  double circ=0.;
  for (list&lt;Wall *&gt;::const_iterator w=walls.begin();
       w!=walls.end();
       w++) {
    cerr &lt;&lt; (*w)-&gt;N1()-&gt;Index() &lt;&lt; "-&gt;" &lt;&lt; (*w)-&gt;N2()-&gt;Index() &lt;&lt; " = " &lt;&lt; (*w)-&gt;Length() &lt;&lt; endl; 
    circ +=  (*w)-&gt;Length();
  }
  cerr &lt;&lt; "Circ is " &lt;&lt; circ &lt;&lt; endl;
					
					
  if (e-&gt;button() == Qt::MidButton) {
    double sum_pin_bef = getMesh().CalcProtCellsWalls(1);
						
    QString message(QString("Dividing Cell %1").arg(index));
    ((Main *)main_window)-&gt;UserMessage(message);
    cerr &lt;&lt; message.toStdString();
    Divide();
    ((Main *)main_window)-&gt;Plot();
						
    double sum_pin_aft = getMesh().CalcProtCellsWalls(1);
						
    cerr &lt;&lt; "Sum PIN1, before: " &lt;&lt; sum_pin_bef &lt;&lt; ", after: " &lt;&lt; sum_pin_aft &lt;&lt; endl;
    return;
  }
  if (e-&gt;button() == Qt::LeftButton) {
    //double sum_walls=0.;
    cerr &lt;&lt; "Wall lengths: ";
    for (list&lt;Wall *&gt;::const_iterator w=walls.begin();
	 w!=walls.end();
	 w++) {
      //cerr &lt;&lt; (*w)-&gt;getTransporter(this, 1) &lt;&lt; " ";
      cerr &lt;&lt; (*w)-&gt;Length() &lt;&lt; " ";
      //sum_walls+=(*w)-&gt;getTransporter(this, 1); //* (*w)-&gt;Length();
    }
						
    cerr &lt;&lt; ", Chemical(1) = " &lt;&lt; Chemical(1) &lt;&lt; ", sum = "  &lt;&lt; SumTransporters(1) + Chemical(1) &lt;&lt; endl;
						
    QString message;
    message=QString("Cell %1 has chemicals ( %2, %3, %4, %5), and it has %6 of PIN1 at its walls. Area is %7").arg(Index()).arg(chem[0]).arg(chem[1]).arg(chem[2]).arg(chem[3]).arg(SumTransporters(1)).arg(Area());
						
    ((Main *)main_window)-&gt;UserMessage(message);
						
    /* cerr &lt;&lt; "Cell "  &lt;&lt; index &lt;&lt; " has chemicals ( " &lt;&lt; chem[0] &lt;&lt; ", " &lt;&lt; chem[1] &lt;&lt; " ) " &lt;&lt; endl;
						 
    cerr &lt;&lt; "Cell "  &lt;&lt; index &lt;&lt; "'s amount of PIN1 at the walls: " &lt;&lt; SumTransporters(1) &lt;&lt; endl;*/
#ifdef QTGRAPHICS
    /* double sum_PIN1 = Chemical(4);
						 
    for (list&lt;Wall *&gt;::const_iterator i = walls.begin();
    i!=walls.end();
    i++) {
    sum_PIN1 += (*i)-&gt;getTransporter(this, 0);
    }
    */
						
    //main_window-&gt;UserMessage(QString("Concentration chemical 0 of cell %1 = %2").arg(Index()).arg(chem[0]));
    //main_window-&gt;UserMessage(QString("Target area of cell %1 = %2").arg(Index()).arg(TargetArea()));
    //main_window-&gt;UserMessage(QString("Sum PIN1 of cell %1 = %2 (intracellular %3)").arg(Index()).arg(sum_PIN1).arg(Chemical(4)));
						
    /* QString message;
       message=QString("Cell %1's nodes are:").arg(Index());
						 
       for (list&lt;int&gt;::iterator it=neighbors.begin();
       it!=neighbors.end();
       it++) {
       message += QString(" %2").arg(*it);
       }
						 
       main_window-&gt;UserMessage(message);*/
						
    //SetWallLengths();
    //main_window-&gt;UserMessage(QString("Cell %1 apoptoses.").arg(Index()));
    //Apoptose();
    //m-&gt;CleanUpCellNodeLists();
#ifdef HAVE_QWT    
    QStringList curvenames; 
    curvenames += QString("Auxin");
    curvenames += QString("PIN1");
    curvenames += QString("AUX1");
    curvenames += QString("Wall PIN1");
    PlotDialog *plot = new PlotDialog((Main *)main_window, QString("Monitor for Cell %1").arg(Index()), curvenames);
    QObject::connect(this, SIGNAL(ChemMonValue(double, double *)),
		     plot, SLOT(AddValue(double,double *)));
#endif
  } else {
    //Divide();
  }
#endif
}
				
				
				// Set sum of PIN1 back to Pi_tot. Hence we assume the cell maintain a constant level of Pi.
				
void Cell::OnDivide(ParentInfo &amp;parent_info, Cell &amp;daughter) {
					
  //cerr &lt;&lt; "Calling Cell::OnDivide()" &lt;&lt; endl;
					
  // PIN1 distributes between parent and daughter according to area
  double area = Area(), daughter_area = daughter.Area();
  double tot_area = area + daughter_area;
					
  //chem[1]*=(area/tot_area);
  //daughter.chem[1]*=(daughter_area/tot_area);
					
  // For lack of detailed data, or a better rule, we assume that cells remain polarized
  // after division
					
  // So the PIN1 is redistributed according to the original polarization over the walls
					
  // parent_info contains info about the parent 
  // redistribute the PIN in the endosome according to area
					
  chem[1] = parent_info.PINendosome*(area/tot_area);
  daughter.chem[1] = parent_info.PINendosome*(daughter_area/tot_area);
					
  // Now redistribute the membrane PINs according to the original polarization in the parent
  // mmm... I'd like to have a better, biologically motivated rule for this, 
  // but for lack of something better... I hope I'm excused :-). Let's say the overall
  // organization of the actin fibres is not completely destroyed after division...
					
  // distribute wallPINs according to the circumference of the parent and daughter
  double circ = Circumference( );
  double daughter_circ = daughter.Circumference();
  double tot_circ = circ + daughter_circ;
					
  double wallPINs = (circ / tot_circ) * parent_info.PINmembrane;
  double daughter_wallPINs = (daughter_circ / tot_circ) * parent_info.PINmembrane;
					
  //cerr &lt;&lt; "wallPINs = " &lt;&lt; wallPINs &lt;&lt;  ", daughter_wallPINs =  " &lt;&lt; daughter_wallPINs &lt;&lt; "sum = " &lt;&lt; wallPINs + daughter_wallPINs &lt;&lt; ", PINmembrane = " &lt;&lt; parent_info.PINmembrane &lt;&lt; endl;
  // distrubute it according to the overall polarity
  Vector polarization = parent_info.polarization.Normalised().Perp2D();
					
  double sum=0.;
  for (list&lt;Wall *&gt;::const_iterator w=walls.begin();
       w!=walls.end();
       w++) {
						
    // distribute according to angle (0 degrees: maximum, 180 degrees minimum)
    double tmp=InnerProduct((*w)-&gt;getWallVector(this),polarization); // move domain from [-1,1] to [0,1]
						
	  //cerr &lt;&lt; "[" &lt;&lt; tmp &lt;&lt; "]";
    sum+=tmp;
    //(*w)-&gt;setTransporter(this, 1, 
  }
					
  //cerr &lt;&lt; "Sum is " &lt;&lt; sum &lt;&lt; endl;
  //double sum_wall_Pi = SumTransporters(1);
					
  // After division, cells produce PIN1 (in intracellular storage) until total amount becomes Pi_tot
  //SetChemical(1, par.Pi_tot - sum_wall_Pi  );
  //SetNewChem(1, Chemical(1));
					
  //cerr &lt;&lt; "[ "  &lt;&lt; sum_wall_Pi + Chemical(1) &lt;&lt; "]";
}

void Wall::OnWallInsert(void) {
				  
  // NOTE: THIS FUNCTION IS CALLED AFTER Cell::OnDivide();
  // After division, we put some PIN1 on the walls, to prevent quick
  // redistribution of PIN1s and consequent auxin accumulation after
  // division.
					
  // make sure dPij/dt = 0 at both sides of the new wall.
					
  // True for: 
  // Pij = k1/k2 * A_j * L_ij * P_i
  // Pji = k1/k2 * A_i * L_ij * P_j
					
  //transporters1[1] = (par.k1/par.k2) * c2-&gt;Chemical(0) * length * c1-&gt;Chemical(1);
  //transporters2[1] = (par.k1/par.k2) * c1-&gt;Chemical(0) * length * c2-&gt;Chemical(1);
					
  //transporters1[1]=transporters2[1]=0.;
  // cerr &lt;&lt; "Length of new wall is " &lt;&lt; length &lt;&lt; endl;
  //cerr &lt;&lt; "PIN1 is [ " &lt;&lt; transporters1[1] &lt;&lt; " | " &lt;&lt; transporters2[1] &lt;&lt; "] ";
}

				
				
				
int main(int argc,char **argv) {
					
  try {
						
    //if (argc&lt;2 || strstr(argv[1],".par")==0) {
    //  throw "Usage: Leaf [parfile].par"; 
    //}
    //par.Read(argv[1]);
						
    // parse command-line options
						
    int c;
    //int digit_optind = 0;
						
    char *parfile=0;
    char *leaffile=0;
    /* ofstream args("args.txt");
       for (int i=0;i&lt;argc;i++) {
       args &lt;&lt; argv[i] &lt;&lt; endl;
       }*/
						
    while (1) {
							
      //int this_option_optind = optind ? optind : 1;
      int option_index = 0;
      static struct option long_options[] = {
	{"batch", 0, 0, 0},
	{"par", 1, 0, 0},
	{"leaffile", 2, 0, 0}
      };
							
      // short option 'p' creates trouble for non-commandline usage on MacOSX. Option -p changed to -P (capital)
      static char *short_options = "bP:l";
      c = getopt_long (argc, argv, "bP:l:",
		       long_options, &amp;option_index);
      if (c == -1)
	break;
							
							
      if (c==0) {
	printf ("option %s", long_options[option_index].name);
	if (optarg)
	  printf (" with arg %s", optarg);
	printf ("\n");
								
	c = short_options[option_index];
      }
							
      switch (c) {
      case 'b':
	cerr &lt;&lt; "Running in batch mode\n";
	batch=true;
	break;
									
      case 'p':
	parfile=strdup(optarg);
	if (!parfile) {
	  throw("Out of memory");
	}
	printf ("parameter file is '%s'\n", parfile);
									
	break;
									
      case 'l':
	leaffile=strdup(optarg);
	if (!leaffile) {
	  throw("Out of memory");
	}
	printf("Reading leaf state file '%s'\n", leaffile);
	break;
									
      case '?':
	break;
									
      default:
	printf ("?? getopt returned character code 0%o ??\n", c);
      }
    }
						
						
    if (optind &lt; argc) {
      printf ("non-option ARGV-elements: ");
      while (optind &lt; argc)
	printf ("%s ", argv[optind++]);
      printf ("\n");
    }
						
						
#ifdef X11GRAPHICS
    X11Graphics g(par.sizex,par.sizey);
    g.ChangeTitle("Virtual Leaf");
#endif
#ifdef QTGRAPHICS
    //QApplication app(argc, argv);
						
    //argc=1;
    QCoreApplication *app;
						
    QGraphicsScene canvas(0,0,8000,6000);
						
    QPalette tooltippalette = QToolTip::palette();
    QColor transparentcolor = QColor(tooltippalette.brush(QPalette::Window).color());
    //transparentcolor.setAlphaF(0.9);
						
    tooltippalette.setBrush (QPalette::Window, QBrush (transparentcolor) );
    QToolTip::setPalette( tooltippalette );
						
    if (batch) {
      // Note: QCoreApplication allows for command line applications, independent of X-Server on Unix.
      // Allows for running on cluster
      app = new QCoreApplication(argc,argv);
      main_window=new MainBase(canvas, mesh);
    } else {
      app = new QApplication(argc,argv);
      main_window=new Main(canvas, mesh);
      ((Main *)main_window)-&gt;resize( ((Main *)main_window)-&gt;sizeHint());
    }
						
						
    if (!batch) {
      if ( QApplication::desktop()-&gt;width() &gt; ((Main *)main_window)-&gt;width() + 10
	   &amp;&amp; QApplication::desktop()-&gt;height() &gt; ((Main *)main_window)-&gt;height() +30 )
	((Main *)main_window)-&gt;show();
      else
	((Main *)main_window)-&gt;showMaximized();
    }
						
    canvas.setSceneRect(QRectF());
    if (!batch) {
      QObject::connect( qApp, SIGNAL(lastWindowClosed()), qApp, SLOT(quit()) );
    }
    //    return app.exec();
#endif
						
    if (parfile)
      par.Read(parfile);
						
    //else
    //  par.Read("default.par");
    Seed(par.rseed);
						
#ifdef XFIGGRAPHICS
    Graphics g;
#endif
						
						
    main_window-&gt;Init(leaffile);
						
    // if we have supplied a leaffile AND a parfile, reread the parameter file,
    // because the leaffile also contains parameter information
    if (leaffile &amp;&amp; parfile) {
      par.Read(parfile);
    }
						
    Cell::SetMagnification(10);
    Cell::setOffset(0,0);
						
    main_window-&gt;FitLeafToCanvas();
						
#ifdef QTGRAPHICS
						
    // check if leaf crosses boundary
    /* Vector bbll,bbur;
       mesh.BoundingBox(bbll,bbur);
						 
       double scale_x = canvas.width()/(bbur.x-bbll.x);
       double scale_y = canvas.height()/(bbur.y-bbll.y);
						 
       Cell::Scale(scale_x&lt;scale_y ? scale_x:scale_y); // smallest of scale_x and scale_y
						 
       double offset_x = (canvas.width()/Cell::Magnification()-(bbur.x-bbll.x))/2.;  
       double offset_y = (canvas.height()/Cell::Magnification()-(bbur.y-bbll.y))/2.;
       Cell::setOffset(offset_x, offset_y);
    */
    /* Vector bbll,bbur;
       mesh.BoundingBox(bbll,bbur);
       cerr &lt;&lt; "bbll = " &lt;&lt; bbll &lt;&lt; endl;
       cerr &lt;&lt; "bbur = " &lt;&lt; bbur &lt;&lt; endl;
       double cw = (bbur.x - bbll.x);
       double ch = (bbur.y - bbll.y);
       double factor = canvas.width()/(2*cw);
       cerr &lt;&lt; "factor = " &lt;&lt; factor &lt;&lt; ", width = " &lt;&lt; canvas.width() &lt;&lt; endl;
       cerr &lt;&lt; "Size is " &lt;&lt; cw &lt;&lt; " x " &lt;&lt; ch &lt;&lt; endl;
       canvas.resize((int)(2*cw*factor),(int)(2*ch*factor));
       Cell::SetMagnification(factor);
       //main_window-&gt;scale(factor);
       //Cell::Translate(-bbll.x+cw/2,-bbll.y+ch/2);
       cerr &lt;&lt; -bbll.x+cw/2 &lt;&lt; ", " &lt;&lt; -bbll.y+ch/2 &lt;&lt; ", " &lt;&lt; canvas.width() &lt;&lt; ", " &lt;&lt; canvas.height() &lt;&lt; endl;
       Cell::Translate((-bbll.x+cw/2),(-bbll.y+ch/2));
    */
						
						
    main_window-&gt;Plot();
						
						
#endif
						
#ifdef QTGRAPHICS
    if (batch) {
      //main_window-&gt;toggleMovieFrames();
      //main_window-&gt;toggleShowNodes();
      //for (int i=0;i&lt;par.nit;i++) {
      double t=0.;
      do {
	t = main_window-&gt;TimeStep();
		  /* cerr &lt;&lt; endl &lt;&lt; "***********************************************" &lt;&lt; endl;
		   cerr &lt;&lt; "Time is " &lt;&lt; t &lt;&lt; endl;
		   cerr &lt;&lt; "par.maxt = " &lt;&lt; par.maxt &lt;&lt; endl;
		   cerr &lt;&lt; endl &lt;&lt; "***********************************************" &lt;&lt; endl;*/
	  } while (t &lt; par.maxt);
							
    } else
      return app-&gt;exec();
#else
    //for (int i=0;i&lt;par.nit;i++) {
    do {
      t= g.TimeStep();
    } while (t &lt; par.maxt);
#endif
						
  } catch (const char *message) {
    if (batch) { 
      cerr &lt;&lt; "Exception caught:" &lt;&lt; endl;
      cerr &lt;&lt; message &lt;&lt; endl;
      abort();
    } else {
      QString qmess=QString("Exception caught: %1").arg(message);
      QMessageBox::critical(0, "Critical Error", qmess);
      abort();
    }
  } catch (ios_base::failure) {
    stringstream error_message;
    error_message &lt;&lt; "I/O failure: " &lt;&lt; strerror(errno);
    if (batch) {
      cerr &lt;&lt; error_message.str() &lt;&lt;endl;
      abort();
    } else {
      QString qmess(error_message.str().c_str());
      QMessageBox::critical(0, "I/O Error", qmess );
      abort();
    }
  }
					
}
</code>
  <code name="reactions_aux1_van3.h">
extern double auxin_account;
const int Cell::nchem = 4;

class AuxinTransport : public TransportFunction {

 public:
  virtual void operator()(Wall *w, double *dchem_c1, double *dchem_c2) {
	     // leaf edge is const source of auxin
    // (Neumann boundary condition: we specify the influx)
	  if (w-&gt;C2()-&gt;BoundaryPolP()) {
		  if (w-&gt;AuxinSource()) {
			  double aux_flux = par.leaf_tip_source * w-&gt;Length();
			  dchem_c1[0]+= aux_flux;
			  
			  // dchem_c2 is undefined..!
			  return;
		  } else {
			  if (w-&gt;AuxinSink()) {
				  
				  // efflux into Shoot Apical meristem
				  // we assume all PINs are directed towards shoot apical meristem
				  dchem_c1[0] -= par.sam_efflux * w-&gt;C1()-&gt;Chemical(0) / (par.ka + w-&gt;C1()-&gt;Chemical(0));
				  
				  return;
			  } else {
				
				  // Active fluxes (PIN1 and AUX1 mediated transport)
				  
				  // (Transporters measured in moles, here)
				  // efflux from cell 1 to cell 2
				  double trans12 = ( par.transport * w-&gt;Transporters1(1) * w-&gt;C1()-&gt;Chemical(0) / (par.ka + w-&gt;C1()-&gt;Chemical(0)) 
									+ par.aux1transport * w-&gt;C2()-&gt;Chemical(2) * w-&gt;C1()-&gt;Chemical(0) / (par.kaux1 + w-&gt;C1()-&gt;Chemical(0)) );
				  
				  // efflux from cell 2 to cell 1
				  double trans21 = ( par.transport * w-&gt;Transporters2(1) * w-&gt;C2()-&gt;Chemical(0) / (par.ka + w-&gt;C2()-&gt;Chemical(0)) 
									+ par.aux1transport * w-&gt;C1()-&gt;Chemical(2) * w-&gt;C2()-&gt;Chemical(0) / (par.kaux1 + w-&gt;C2()-&gt;Chemical(0)) );
				  
				  dchem_c1[0] += trans21 - trans12;
				  dchem_c2[0] += trans12 - trans21;
				  return;
			  }
			  
		  }
	  }
	  
      
	  if (w-&gt;C1()-&gt;BoundaryPolP()) {
		  
		  if (w-&gt;AuxinSource()) {
			  double aux_flux = par.leaf_tip_source * w-&gt;Length();
			  dchem_c2[0] += aux_flux;
			  // dchem_c1 is undefined...!
			  return;
		  } else {
			  
			  if (w-&gt;AuxinSink()) {
				  
				  
				  // efflux into Shoot Apical meristem
				  // we assume all PINs are directed towards shoot apical meristem
				  
				  // no passive fluxes: outside is impermeable
				  
				  // Active fluxes (PIN1 and AUX1 mediated transport)
				  
				  // (Transporters measured in moles, here)
				  // efflux from cell 1 to cell 2
				  // assumption: no AUX1 in shoot apical meristem
				  double trans12 = ( par.transport * w-&gt;Transporters1(1) * w-&gt;C1()-&gt;Chemical(0) / (par.ka + w-&gt;C1()-&gt;Chemical(0)));
				  dchem_c1[0] +=  - trans12;
				  
				  return;
				  
				  //dchem_c2[0] -= par.sam_efflux * w-&gt;C2()-&gt;Chemical(0) / (par.ka + w-&gt;C2()-&gt;Chemical(0));
				  
				 // return;
			  }  else {

			  }
		  }
	  }
	  
	  
	  // Passive fluxes (Fick's law)
	  // only auxin flux now
	  // flux depends on edge length and concentration difference
	  for (int c=0;c&lt;Cell::NChem();c++) {
		  double phi = w-&gt;Length() * ( par.D[c] ) * ( w-&gt;C2()-&gt;Chemical(c) - w-&gt;C1()-&gt;Chemical(c) );
		  dchem_c1[c] += phi; 
		  dchem_c2[c] -= phi;
      }
	  // Active fluxes (PIN1 and AUX1 mediated transport)
	  
	  // (Transporters measured in moles, here)
	  // efflux from cell 1 to cell 2
	  double trans12 = ( par.transport * w-&gt;Transporters1(1) * w-&gt;C1()-&gt;Chemical(0) / (par.ka + w-&gt;C1()-&gt;Chemical(0)) 
						+ par.aux1transport * w-&gt;C2()-&gt;Chemical(2) * w-&gt;C1()-&gt;Chemical(0) / (par.kaux1 + w-&gt;C1()-&gt;Chemical(0)) );
	  
	  // efflux from cell 2 to cell 1
	  double trans21 = ( par.transport * w-&gt;Transporters2(1) * w-&gt;C2()-&gt;Chemical(0) / (par.ka + w-&gt;C2()-&gt;Chemical(0)) 
						+ par.aux1transport * w-&gt;C1()-&gt;Chemical(2) * w-&gt;C2()-&gt;Chemical(0) / (par.kaux1 + w-&gt;C2()-&gt;Chemical(0)) );
	  
	  dchem_c1[0] += trans21 - trans12;
	  dchem_c2[0] += trans12 - trans21;
	  
  }    
};

class PIN1Localization : public WallReaction {
  
 public:
  virtual void operator()(Wall *w, double *dw1, double *dw2) {
    
    
      
    // Cells polarize available PIN1 to Shoot Apical Meristem
    if (w-&gt;C2()-&gt;BoundaryPolP()) {
      if (w-&gt;AuxinSink()) {
	
	dw1[0] = 0.; dw2[0] = 0.;
	dw1[2] = 0.; dw2[2] = 0.;
            
	// assume high auxin concentration in SAM, to convince PIN1 to polarize to it
	// exocytosis regulated0
	double nb_auxin = par.sam_auxin;
	double receptor_level = nb_auxin * par.r / (par.kr + nb_auxin);
	
	dw1[1] = par.k1 * w-&gt;C1()-&gt;Chemical(1) * receptor_level /( par.km + w-&gt;C1()-&gt;Chemical(1) ) - par.k2 * w-&gt;Transporters1(1);
	
	dw2[1] = 0.;
	return;
     
      } else {
	dw1[0]=dw2[0]=dw1[1]=dw2[1]=dw1[2]=dw2[2];
	return;
      }
    }
    
    if (w-&gt;C1()-&gt;BoundaryPolP()) {
      if (w-&gt;AuxinSink())  {
      
	dw1[0] = 0.; dw2[0] = 0.;
	dw1[2] = 0.; dw2[2] = 0.;
      
	// assume high auxin concentration in SAM, to convince PIN1 to polarize to it
	// exocytosis regulated
	double nb_auxin = par.sam_auxin;
	double receptor_level = nb_auxin * par.r / (par.kr + nb_auxin);
	dw2[1] = par.k1 * w-&gt;C2()-&gt;Chemical(1) * receptor_level /( par.km + w-&gt;C2()-&gt;Chemical(1) ) - par.k2 * w-&gt;Transporters2(1);
	
	dw1[1] = 0.;
	return;
      
      }  else {
	dw1[0]=dw2[0]=dw1[1]=dw2[1]=dw1[2]=dw2[2];
	return;
      }
    }
    
    
    
    // PIN1 localization at wall 1
    // Note: chemical 0 is Auxin (intracellular storage only)
    // Chemical 1 is PIN1 (walls and intracellular storage)
    //! \f$ \frac{d Pij/dt}{dt} = k_1 A_j \frac{P_i}{L_ij} - k_2 P_{ij} \f$
    // Note that Pij is measured in term of concentration (mol/L)
    // Pi in terms of quantity (mol)

    double dPijdt1=0., dPijdt2=0.;
    
    // normal cell
    double  auxin2 = w-&gt;C2()-&gt;Chemical(0);
    double receptor_level1 = auxin2 * par.r / (par.kr + auxin2);
    
    dPijdt1 = 
      // exocytosis regulated
    par.k1 * w-&gt;C1()-&gt;Chemical(1) * receptor_level1 / ( par.km + w-&gt;C1()-&gt;Chemical(1) ) - par.k2 * w-&gt;Transporters1(1);

    double  auxin1 = w-&gt;C1()-&gt;Chemical(0);
    double receptor_level2 = auxin1 * par.r / (par.kr + auxin1);
    
    // normal cell
    dPijdt2 = 
       
      // exocytosis regulated
      par.k1 * w-&gt;C2()-&gt;Chemical(1) * receptor_level2 / ( par.km + w-&gt;C2()-&gt;Chemical(1) ) - par.k2 * w-&gt;Transporters2(1);
    
    /* PIN1 of neighboring vascular cell inhibits PIN1 endocytosis */
    
    dw1[0] = 0.; dw2[0] = 0.;
    dw1[2] = 0.; dw2[2] = 0.;
    
    dw1[1] = dPijdt1;
    dw2[1] = dPijdt2;
    
  }
};


inline double YlPilPli(Cell &amp;here, Cell &amp;nb, Wall &amp;w) {
  return nb.Chemical(2) * w.Transporters1(1) * w.Transporters2(1);
}

inline double AlPil(Cell &amp;here, Cell &amp;nb, Wall &amp;w) {
  return nb.Chemical(0) * w.getTransporter( &amp;here, 1 );
}

inline double AlplusYlLil(Cell &amp;here, Cell &amp;nb, Wall &amp;w) {
  return ( nb.Chemical(0) + nb.Chemical(2) ) * w.Length();
}

inline double AlLil(Cell &amp;here, Cell &amp;nb, Wall &amp;w) {
  return ( nb.Chemical(0) ) * w.Length();
}

inline double Lil(Cell &amp;here, Cell &amp;nb, Wall &amp;w) {
  return w.Length();
}

inline double complex_PijAj(Cell &amp;here, Cell &amp;nb, Wall &amp;w) { 

  // gives the amount of complex "auxinreceptor-Pin1"  at the wall (at QSS) 
  //return here.Chemical(1) * nb.Chemical(0) / ( par.km + here.Chemical(1));
  
  double nb_aux = (nb.BoundaryPolP() &amp;&amp; w.AuxinSink()) ? par.sam_auxin : nb.Chemical(0);
  double receptor_level = nb_aux * par.r / (par.kr + nb_aux);

  return here.Chemical(1) * receptor_level / ( par.km + here.Chemical(1));
  
}

class AuxinAndDifferentiation : public CellReaction {
  
  // Note: Pi and Pij measured in numbers of molecules, not concentrations
 public:
  virtual void operator()(Cell *c, double *dchem) {
  
    double dPidt = 0.;
    
    double sum_Pij = c-&gt;SumTransporters( 1 );

    // exocytosis regulated: 
	  // van3 expression reduces rate of PIN1 endocytosis 
    dPidt = -par.k1 * c-&gt;ReduceCellAndWalls&lt;double&gt;( complex_PijAj ) + 
	  (c-&gt;Chemical(3) &lt; 0.5 ? par.k2 : par.k2van3) * sum_Pij;
	  
    // production of PIN depends on auxin concentration
    dPidt +=  (c-&gt;AtBoundaryP()?par.pin_prod_in_epidermis:par.pin_prod) * c-&gt;Chemical(0) - c-&gt;Chemical(1) * par.pin_breakdown;
    
	/*if (c-&gt;AtBoundaryP()) {
		dchem[2] = 0.01;
		//cerr &lt;&lt; "Making cell blue.\n";
	} else {
		dchem[2] = -0.1 * c-&gt;Chemical(2);
	}*/

    // no PIN production in SAM
    if (c-&gt;Boundary() == Cell::SAM) {
      dchem[1]=0.;
      dchem[0]= - par.sam_auxin_breakdown * c-&gt;Chemical(0);
	  dchem[2]=0.;
    } else {
      
      dchem[1] = dPidt;
      
      
      // source of auxin
      dchem[0] = par.aux_cons;
	  
	  // auxin-induced AUX1 production, in the epidermis
      dchem[2] = ( c-&gt;AtBoundaryP() ? par.aux1prod : par.aux1prodmeso ) * ( c-&gt;Chemical(0)  / ( 1. + par.kap * c-&gt;Chemical(0) ) ) - par.aux1decay * c-&gt;Chemical(2) ;//: 0.;
  
	  // auxin-induced production of VAN-3? Autokatalysis?
		//dchem[3] = par.van3prod * (c-&gt;Chemical(0) / (1. + par.kvp * c-&gt; Chemical(0) ) )
		double A = c-&gt;Chemical(0);
		double van3 = c-&gt;Chemical(3);
		dchem[3] = par.van3prod * A - par.van3autokat * van3 + van3*van3/(1 + par.van3sat * van3*van3 ); 
	}
  }

};




class CellHouseKeeping {
public:
  void operator() (Cell &amp;c) const {
    
    if (c.Boundary()==Cell::None) {
      c.CheckForDivision();
      
      // expand if this is not a provascular cell
		if (c.Chemical(3) &lt; 0.7 ) {
			c.EnlargeTargetArea(par.cell_expansion_rate);
		} 
    }  
  }
};

void Cell::SetColor(QColor &amp;color) {
	
	// Red: AUX1
	// Green: Auxin
	// Blue: van-3
	color.setRgb(chem[2]/(1+chem[2]) * 255.,(chem[0]/(1+chem[0]) * 255.),(chem[3]/(1+chem[3]) *255.) );
		
}

void Cell::CheckForDivision(void) {
	//  if (/* Chemical(0)&lt;0.4 &amp;&amp; */ /* differentiated cells do not divide */ area &gt; 2*base_area /* || Length()&gt;50 */) {
	
	if  (Chemical(0) &gt; par.morphogen_div_threshold )
		if (area &gt; par.rel_cell_div_threshold * base_area ) {
			/* remark no longer valid? //m-&gt;IncreaseCellCapacityIfNecessary();
			 // Note that calling Divide as follows prevents trouble if cell
			 // vector is relocated */
			Divide();
		}
	
}

</code>
  <nodes n="222" target_length="3.09017">
    <node x="-102.575" y="-54.6258" fixed="false" boundary="true" sam="false"/>
    <node x="-19.1113" y="-144.787" fixed="false" boundary="true" sam="false"/>
    <node x="9.39678" y="-142.547" fixed="false" boundary="true" sam="false"/>
    <node x="43.0097" y="-126.65" fixed="false" boundary="true" sam="false"/>
    <node x="82.6949" y="-66.4183" fixed="false" boundary="true" sam="false"/>
    <node x="-68.6662" y="-3.57774" fixed="false" boundary="true" sam="false"/>
    <node x="49.212" y="-5.36522" fixed="false" boundary="true" sam="false"/>
    <node x="-26.4429" y="-8.32901" fixed="false" boundary="false" sam="false"/>
    <node x="5.41469" y="-4.79531" fixed="false" boundary="false" sam="false"/>
    <node x="-4.99518" y="-5.87004" fixed="false" boundary="false" sam="false"/>
    <node x="-9.82649" y="-107.512" fixed="false" boundary="false" sam="false"/>
    <node x="-18.1387" y="-104.604" fixed="false" boundary="false" sam="false"/>
    <node x="-62.6353" y="1.66816" fixed="false" boundary="true" sam="false"/>
    <node x="29.0993" y="-140.695" fixed="false" boundary="true" sam="false"/>
    <node x="-70.2581" y="-116.774" fixed="false" boundary="true" sam="false"/>
    <node x="62.341" y="-102.396" fixed="false" boundary="true" sam="false"/>
    <node x="3.00855" y="-54.0284" fixed="false" boundary="false" sam="false"/>
    <node x="35.5107" y="-68.2754" fixed="false" boundary="false" sam="false"/>
    <node x="13.2935" y="-53.9494" fixed="false" boundary="false" sam="false"/>
    <node x="-95.1525" y="-71.9998" fixed="false" boundary="true" sam="false"/>
    <node x="-35.1671" y="-73.043" fixed="false" boundary="false" sam="false"/>
    <node x="-87.1277" y="-66.4035" fixed="false" boundary="false" sam="false"/>
    <node x="-48.4822" y="-57.8052" fixed="false" boundary="false" sam="false"/>
    <node x="20.8109" y="-5.74767" fixed="false" boundary="false" sam="false"/>
    <node x="-51.8269" y="-4.70637" fixed="false" boundary="false" sam="false"/>
    <node x="-16.1454" y="-3.6679" fixed="false" boundary="false" sam="false"/>
    <node x="-55.947" y="-129.483" fixed="false" boundary="true" sam="false"/>
    <node x="71.4459" y="-95.6606" fixed="false" boundary="true" sam="false"/>
    <node x="78.2326" y="-38.5994" fixed="false" boundary="true" sam="false"/>
    <node x="-40.6733" y="-4.149" fixed="false" boundary="false" sam="false"/>
    <node x="-35.3239" y="-0.964248" fixed="false" boundary="false" sam="false"/>
    <node x="-34.3371" y="-9.24651" fixed="false" boundary="false" sam="false"/>
    <node x="-53.668" y="-49.5449" fixed="false" boundary="false" sam="false"/>
    <node x="-42.8301" y="-26.3375" fixed="false" boundary="false" sam="false"/>
    <node x="43.3724" y="-10.3632" fixed="false" boundary="false" sam="false"/>
    <node x="46.3633" y="-18.1371" fixed="false" boundary="false" sam="false"/>
    <node x="42.4814" y="-60.9721" fixed="false" boundary="false" sam="false"/>
    <node x="-1.13705" y="-109.294" fixed="false" boundary="false" sam="false"/>
    <node x="14.4685" y="-97.6755" fixed="false" boundary="false" sam="false"/>
    <node x="25.9967" y="-86.4122" fixed="false" boundary="false" sam="false"/>
    <node x="-61.4106" y="-120.523" fixed="false" boundary="true" sam="false"/>
    <node x="-35.2472" y="-84.2189" fixed="false" boundary="false" sam="false"/>
    <node x="-55.1079" y="-104.647" fixed="false" boundary="false" sam="false"/>
    <node x="-43.8517" y="-90.8435" fixed="false" boundary="false" sam="false"/>
    <node x="26.6464" y="-4.81769" fixed="false" boundary="false" sam="false"/>
    <node x="21.7335" y="-0.760644" fixed="false" boundary="false" sam="false"/>
    <node x="44.2493" y="0.581572" fixed="false" boundary="true" sam="false"/>
    <node x="-6.2467" y="-0.849895" fixed="false" boundary="false" sam="false"/>
    <node x="42.3805" y="-73.2024" fixed="false" boundary="false" sam="false"/>
    <node x="59.3388" y="-112.85" fixed="false" boundary="true" sam="false"/>
    <node x="19.3388" y="-143.366" fixed="false" boundary="true" sam="false"/>
    <node x="-47.8496" y="-136.193" fixed="false" boundary="true" sam="false"/>
    <node x="37.2932" y="4.30735" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="17.9532" y="4.25439" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="30.8465" y="4.28969" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="24.3998" y="4.27211" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-6.63447" y="4.18722" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="1.56142" y="4.20961" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="9.75731" y="4.23201" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-31.7288" y="4.11862" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-14.9992" y="4.16434" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-23.364" y="4.14151" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-54.9402" y="4.05518" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-47.203" y="4.07631" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-39.4659" y="4.09747" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-97.2199" y="-36.5209" fixed="false" boundary="true" sam="false"/>
    <node x="-93.8757" y="-83.9236" fixed="false" boundary="true" sam="false"/>
    <node x="-11.822" y="-62.1332" fixed="false" boundary="false" sam="false"/>
    <node x="0.277386" y="-45.2718" fixed="false" boundary="false" sam="false"/>
    <node x="77.7932" y="-74.5384" fixed="false" boundary="true" sam="false"/>
    <node x="51.3585" y="-43.2109" fixed="false" boundary="false" sam="false"/>
    <node x="67.8365" y="-62.4512" fixed="false" boundary="false" sam="false"/>
    <node x="62.4592" y="-49.7583" fixed="false" boundary="false" sam="false"/>
    <node x="23.8743" y="-95.8375" fixed="false" boundary="false" sam="false"/>
    <node x="29.7814" y="-113.99" fixed="false" boundary="false" sam="false"/>
    <node x="30.2109" y="-103.483" fixed="false" boundary="false" sam="false"/>
    <node x="-78.5672" y="-61.6879" fixed="false" boundary="false" sam="false"/>
    <node x="-53.1007" y="-96.4997" fixed="false" boundary="false" sam="false"/>
    <node x="-72.9163" y="-69.5659" fixed="false" boundary="false" sam="false"/>
    <node x="-60.7408" y="-92.8714" fixed="false" boundary="false" sam="false"/>
    <node x="15.2877" y="-8.05131" fixed="false" boundary="false" sam="false"/>
    <node x="23.4366" y="-52.7866" fixed="false" boundary="false" sam="false"/>
    <node x="20.15" y="-16.3878" fixed="false" boundary="false" sam="false"/>
    <node x="27.1157" y="-43.2154" fixed="false" boundary="false" sam="false"/>
    <node x="-20.6254" y="-61.2613" fixed="false" boundary="false" sam="false"/>
    <node x="-22.7971" y="-52.9843" fixed="false" boundary="false" sam="false"/>
    <node x="-25.2063" y="-27.6876" fixed="false" boundary="false" sam="false"/>
    <node x="-62.4061" y="-8.35899" fixed="false" boundary="false" sam="false"/>
    <node x="-74.2449" y="-50.8533" fixed="false" boundary="false" sam="false"/>
    <node x="-71.1371" y="-22.8486" fixed="false" boundary="false" sam="false"/>
    <node x="-78.0877" y="-34.8058" fixed="false" boundary="false" sam="false"/>
    <node x="-3.03624" y="-62.1137" fixed="false" boundary="false" sam="false"/>
    <node x="4.97682" y="-99.4425" fixed="false" boundary="false" sam="false"/>
    <node x="-2.7225" y="-76.2065" fixed="false" boundary="false" sam="false"/>
    <node x="0.62444" y="-90.7096" fixed="false" boundary="false" sam="false"/>
    <node x="-27.4112" y="-139.608" fixed="false" boundary="true" sam="false"/>
    <node x="-26.0899" y="-100.451" fixed="false" boundary="false" sam="false"/>
    <node x="-29.2799" y="-123.759" fixed="false" boundary="false" sam="false"/>
    <node x="-30.03" y="-108.08" fixed="false" boundary="false" sam="false"/>
    <node x="7.30936" y="-125.49" fixed="false" boundary="false" sam="false"/>
    <node x="-95.2411" y="-27.9543" fixed="false" boundary="true" sam="false"/>
    <node x="63.757" y="-15.0805" fixed="false" boundary="true" sam="false"/>
    <node x="50.5999" y="-87.2329" fixed="false" boundary="false" sam="false"/>
    <node x="-83.7467" y="-103.2" fixed="false" boundary="true" sam="false"/>
    <node x="-4.3151" y="-17.8201" fixed="false" boundary="false" sam="false"/>
    <node x="-78.609" y="-42.1833" fixed="false" boundary="false" sam="false"/>
    <node x="-90.7328" y="-37.6552" fixed="false" boundary="false" sam="false"/>
    <node x="-84.5207" y="-39.5892" fixed="false" boundary="false" sam="false"/>
    <node x="76.9588" y="-85.872" fixed="false" boundary="true" sam="false"/>
    <node x="15.1055" y="-122.121" fixed="false" boundary="false" sam="false"/>
    <node x="22.573" y="-118.295" fixed="false" boundary="false" sam="false"/>
    <node x="52.6218" y="-121.349" fixed="false" boundary="true" sam="false"/>
    <node x="71.9831" y="-31.1764" fixed="false" boundary="true" sam="false"/>
    <node x="58.4194" y="-43.9472" fixed="false" boundary="false" sam="false"/>
    <node x="66.9173" y="-34.6724" fixed="false" boundary="false" sam="false"/>
    <node x="62.2903" y="-39.0148" fixed="false" boundary="false" sam="false"/>
    <node x="-87.6379" y="-94.1902" fixed="false" boundary="true" sam="false"/>
    <node x="-66.9287" y="-87.1102" fixed="false" boundary="false" sam="false"/>
    <node x="-80.1718" y="-93.6605" fixed="false" boundary="false" sam="false"/>
    <node x="-73.0787" y="-91.2279" fixed="false" boundary="false" sam="false"/>
    <node x="-55.6215" y="-113.251" fixed="false" boundary="false" sam="false"/>
    <node x="-33.4385" y="-115.889" fixed="false" boundary="false" sam="false"/>
    <node x="-48.3124" y="-114.607" fixed="false" boundary="false" sam="false"/>
    <node x="-40.8386" y="-115.471" fixed="false" boundary="false" sam="false"/>
    <node x="52.9761" y="-96.0799" fixed="false" boundary="false" sam="false"/>
    <node x="45.1756" y="-98.0423" fixed="false" boundary="false" sam="false"/>
    <node x="37.6497" y="-100.567" fixed="false" boundary="false" sam="false"/>
    <node x="-37.8171" y="-18.1694" fixed="false" boundary="false" sam="false"/>
    <node x="49.0562" y="-78.3238" fixed="false" boundary="false" sam="false"/>
    <node x="69.6491" y="-69.5132" fixed="false" boundary="false" sam="false"/>
    <node x="55.4637" y="-74.3735" fixed="false" boundary="false" sam="false"/>
    <node x="62.3536" y="-71.4359" fixed="false" boundary="false" sam="false"/>
    <node x="-28.1141" y="-89.6674" fixed="false" boundary="false" sam="false"/>
    <node x="-5.03714" y="-82.6426" fixed="false" boundary="false" sam="false"/>
    <node x="-21.4339" y="-84.5585" fixed="false" boundary="false" sam="false"/>
    <node x="-13.3852" y="-82.0843" fixed="false" boundary="false" sam="false"/>
    <node x="46.9701" y="-33.9369" fixed="false" boundary="false" sam="false"/>
    <node x="29.7739" y="-33.2638" fixed="false" boundary="false" sam="false"/>
    <node x="38.3833" y="-32.8191" fixed="false" boundary="false" sam="false"/>
    <node x="0.364491" y="-146.356" fixed="false" boundary="true" sam="false"/>
    <node x="27.281" y="-76.7364" fixed="false" boundary="false" sam="false"/>
    <node x="0.900279" y="-70.3117" fixed="false" boundary="false" sam="false"/>
    <node x="18.3103" y="-75.356" fixed="false" boundary="false" sam="false"/>
    <node x="9.51692" y="-73.2215" fixed="false" boundary="false" sam="false"/>
    <node x="-0.344854" y="-119.913" fixed="false" boundary="false" sam="false"/>
    <node x="-24.1395" y="-131.076" fixed="false" boundary="false" sam="false"/>
    <node x="-7.65718" y="-124.817" fixed="false" boundary="false" sam="false"/>
    <node x="-15.6262" y="-128.524" fixed="false" boundary="false" sam="false"/>
    <node x="-5.29154" y="-29.6479" fixed="false" boundary="false" sam="false"/>
    <node x="-21.0969" y="-36.4407" fixed="false" boundary="false" sam="false"/>
    <node x="-12.4814" y="-34.6395" fixed="false" boundary="false" sam="false"/>
    <node x="-44.3984" y="-66.7962" fixed="false" boundary="false" sam="false"/>
    <node x="-66.746" y="-76.9979" fixed="false" boundary="false" sam="false"/>
    <node x="-51.901" y="-70.2942" fixed="false" boundary="false" sam="false"/>
    <node x="-59.2977" y="-73.8224" fixed="false" boundary="false" sam="false"/>
    <node x="0.112512" y="-36.0303" fixed="false" boundary="false" sam="false"/>
    <node x="22.68" y="-25.5863" fixed="false" boundary="false" sam="false"/>
    <node x="7.55018" y="-32.346" fixed="false" boundary="false" sam="false"/>
    <node x="15.0833" y="-28.8361" fixed="false" boundary="false" sam="false"/>
    <node x="-48.2612" y="-42.4865" fixed="false" boundary="false" sam="false"/>
    <node x="-25.0841" y="-44.8374" fixed="false" boundary="false" sam="false"/>
    <node x="-40.6169" y="-44.1767" fixed="false" boundary="false" sam="false"/>
    <node x="-32.9071" y="-44.951" fixed="false" boundary="false" sam="false"/>
    <node x="-49.1404" y="-33.606" fixed="false" boundary="false" sam="false"/>
    <node x="-65.918" y="-18.2152" fixed="false" boundary="false" sam="false"/>
    <node x="-56.4713" y="-30.4503" fixed="false" boundary="false" sam="false"/>
    <node x="-62.2582" y="-25.1419" fixed="false" boundary="false" sam="false"/>
    <node x="-91.0482" y="-20.3198" fixed="false" boundary="true" sam="false"/>
    <node x="83.8683" y="-56.9852" fixed="false" boundary="true" sam="false"/>
    <node x="36.154" y="-120.581" fixed="false" boundary="false" sam="false"/>
    <node x="-100.353" y="-63.9869" fixed="false" boundary="true" sam="false"/>
    <node x="-77.8792" y="-7.10969" fixed="false" boundary="true" sam="false"/>
    <node x="57.5963" y="-8.67787" fixed="false" boundary="true" sam="false"/>
    <node x="37.3161" y="-134.886" fixed="false" boundary="true" sam="false"/>
    <node x="29.4888" y="-60.5782" fixed="false" boundary="false" sam="false"/>
    <node x="-64.0533" y="-49.3957" fixed="false" boundary="false" sam="false"/>
    <node x="67.1581" y="-23.2266" fixed="false" boundary="true" sam="false"/>
    <node x="49.2437" y="-26.0655" fixed="false" boundary="false" sam="false"/>
    <node x="61.2676" y="-24.7896" fixed="false" boundary="false" sam="false"/>
    <node x="55.3079" y="-25.8362" fixed="false" boundary="false" sam="false"/>
    <node x="-76.4379" y="-27.5353" fixed="false" boundary="false" sam="false"/>
    <node x="-84.9767" y="-14.0546" fixed="false" boundary="true" sam="false"/>
    <node x="-80.1952" y="-23.6997" fixed="false" boundary="false" sam="false"/>
    <node x="-82.9594" y="-19.0645" fixed="false" boundary="false" sam="false"/>
    <node x="66.6959" y="-55.2241" fixed="false" boundary="false" sam="false"/>
    <node x="81.2947" y="-47.8638" fixed="false" boundary="true" sam="false"/>
    <node x="71.3835" y="-52.4488" fixed="false" boundary="false" sam="false"/>
    <node x="76.3255" y="-50.0599" fixed="false" boundary="false" sam="false"/>
    <node x="-77.8168" y="-110.821" fixed="false" boundary="true" sam="false"/>
    <node x="35.0532" y="-7.51552" fixed="false" boundary="false" sam="false"/>
    <node x="-54.9402" y="153.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="17.9532" y="153.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-6.63447" y="153.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-31.7288" y="153.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="37.2932" y="153.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-54.9402" y="123.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="17.9532" y="123.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-6.63447" y="123.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-31.7288" y="123.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="37.2932" y="123.759" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-54.9402" y="93.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="17.9532" y="93.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-6.63447" y="93.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-31.7288" y="93.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="37.2932" y="93.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-54.9402" y="63.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="17.9532" y="63.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-6.63447" y="63.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-31.7288" y="63.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="37.2932" y="63.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-54.9402" y="33.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="17.9532" y="33.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-6.63447" y="33.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="-31.7288" y="33.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="37.2932" y="33.7593" fixed="true" boundary="true" sam="true" nodeset="0"/>
    <node x="47.8344" y="-52.5245" fixed="false" boundary="false" sam="false"/>
    <node x="-101.48" y="-45.0612" fixed="false" boundary="true" sam="false"/>
    <node x="-9.50171" y="-147.144" fixed="false" boundary="true" sam="false"/>
    <node x="-26.9285" y="-18.0835" fixed="false" boundary="false" sam="false"/>
    <node x="8.15818" y="-134.078" fixed="false" boundary="false" sam="false"/>
    <node x="-27.4352" y="-67.7455" fixed="false" boundary="false" sam="false"/>
    <node x="-37.9748" y="-139.657" fixed="false" boundary="true" sam="false"/>
  </nodes>
  <cells n="59" offsetx="0" offsety="0" magnification="10" base_area="600" nchem="4">
    <cell index="0" area="638.983" target_area="709.507" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="149"/>
      <node n="86"/>
      <node n="218"/>
      <node n="7"/>
      <node n="31"/>
      <node n="127"/>
      <node n="33"/>
      <node n="163"/>
      <node n="159"/>
      <node n="161"/>
      <node n="162"/>
      <node n="160"/>
      <wall w="14"/>
      <wall w="76"/>
      <wall w="74"/>
      <wall w="89"/>
      <wall w="90"/>
      <wall w="99"/>
      <chem n="4">
        <val v="0.0180563"/>
        <val v="0.101627"/>
        <val v="0"/>
        <val v="1.80942e-05"/>
      </chem>
    </cell>
    <cell index="1" area="645.198" target_area="709.069" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="93"/>
      <node n="133"/>
      <node n="94"/>
      <node n="92"/>
      <node n="38"/>
      <node n="73"/>
      <node n="39"/>
      <node n="140"/>
      <node n="142"/>
      <node n="143"/>
      <node n="141"/>
      <wall w="11"/>
      <wall w="53"/>
      <wall w="51"/>
      <wall w="60"/>
      <wall w="61"/>
      <chem n="4">
        <val v="0.0154691"/>
        <val v="0.302502"/>
        <val v="0"/>
        <val v="0.887318"/>
      </chem>
    </cell>
    <cell index="2" area="668.372" target_area="714.694" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="71"/>
      <node n="184"/>
      <node n="72"/>
      <node n="113"/>
      <node n="70"/>
      <node n="215"/>
      <node n="36"/>
      <node n="17"/>
      <node n="48"/>
      <node n="128"/>
      <node n="130"/>
      <node n="131"/>
      <node n="129"/>
      <wall w="46"/>
      <wall w="0"/>
      <wall w="32"/>
      <wall w="30"/>
      <wall w="47"/>
      <wall w="112"/>
      <chem n="4">
        <val v="0.0127913"/>
        <val v="0.0141801"/>
        <val v="0"/>
        <val v="1.27923e-05"/>
      </chem>
    </cell>
    <cell index="3" area="636.712" target_area="708.882" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="117"/>
      <node n="79"/>
      <node n="77"/>
      <node n="43"/>
      <node n="41"/>
      <node n="20"/>
      <node n="151"/>
      <node n="153"/>
      <node n="154"/>
      <node n="152"/>
      <wall w="91"/>
      <wall w="15"/>
      <wall w="1"/>
      <wall w="37"/>
      <wall w="35"/>
      <wall w="79"/>
      <chem n="4">
        <val v="0.00243236"/>
        <val v="0.00258741"/>
        <val v="0"/>
        <val v="2.43284e-06"/>
      </chem>
    </cell>
    <cell index="4" area="319.405" target_area="329.412" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="30"/>
      <node n="29"/>
      <node n="31"/>
      <node n="7"/>
      <node n="25"/>
      <node n="9"/>
      <node n="47"/>
      <node n="56"/>
      <node n="60"/>
      <node n="61"/>
      <node n="59"/>
      <wall w="4"/>
      <wall w="77"/>
      <wall w="98"/>
      <wall w="9"/>
      <wall w="7"/>
      <wall w="14"/>
      <chem n="4">
        <val v="0.187172"/>
        <val v="0.241541"/>
        <val v="0"/>
        <val v="0.000188311"/>
      </chem>
    </cell>
    <cell index="5" area="655.795" target_area="709.257" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="89"/>
      <node n="180"/>
      <node n="90"/>
      <node n="105"/>
      <node n="88"/>
      <node n="175"/>
      <node n="32"/>
      <node n="159"/>
      <node n="163"/>
      <node n="165"/>
      <node n="166"/>
      <node n="164"/>
      <wall w="92"/>
      <wall w="80"/>
      <wall w="22"/>
      <wall w="20"/>
      <wall w="89"/>
      <wall w="96"/>
      <wall w="108"/>
      <chem n="4">
        <val v="0.0141341"/>
        <val v="0.023567"/>
        <val v="0"/>
        <val v="1.4202e-05"/>
      </chem>
    </cell>
    <cell index="6" area="635.358" target_area="711.194" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="83"/>
      <node n="81"/>
      <node n="174"/>
      <node n="17"/>
      <node n="36"/>
      <node n="215"/>
      <node n="70"/>
      <node n="136"/>
      <node n="138"/>
      <node n="137"/>
      <wall w="0"/>
      <wall w="33"/>
      <wall w="64"/>
      <wall w="85"/>
      <wall w="56"/>
      <chem n="4">
        <val v="0.0143617"/>
        <val v="0.191593"/>
        <val v="0"/>
        <val v="0.887317"/>
      </chem>
    </cell>
    <cell index="7" area="661.57" target_area="720.819" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="75"/>
      <node n="73"/>
      <node n="38"/>
      <node n="92"/>
      <node n="37"/>
      <node n="144"/>
      <node n="99"/>
      <node n="109"/>
      <node n="110"/>
      <node n="74"/>
      <wall w="70"/>
      <wall w="11"/>
      <wall w="45"/>
      <wall w="54"/>
      <wall w="25"/>
      <wall w="43"/>
      <wall w="66"/>
      <chem n="4">
        <val v="0.0264804"/>
        <val v="0.0104165"/>
        <val v="0"/>
        <val v="2.64841e-05"/>
      </chem>
    </cell>
    <cell index="8" area="651.105" target_area="710.132" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="98"/>
      <node n="96"/>
      <node n="132"/>
      <node n="41"/>
      <node n="43"/>
      <node n="77"/>
      <node n="42"/>
      <node n="120"/>
      <node n="122"/>
      <node n="123"/>
      <node n="121"/>
      <wall w="1"/>
      <wall w="16"/>
      <wall w="39"/>
      <wall w="69"/>
      <wall w="40"/>
      <wall w="55"/>
      <chem n="4">
        <val v="0.0191056"/>
        <val v="0.0673363"/>
        <val v="0"/>
        <val v="0.887323"/>
      </chem>
    </cell>
    <cell index="9" area="267.159" target_area="317.037" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="45"/>
      <node n="44"/>
      <node n="189"/>
      <node n="34"/>
      <node n="6"/>
      <node n="46"/>
      <node n="52"/>
      <node n="54"/>
      <node n="55"/>
      <node n="53"/>
      <wall w="102"/>
      <wall w="57"/>
      <wall w="2"/>
      <wall w="5"/>
      <wall w="3"/>
      <chem n="4">
        <val v="0.0402826"/>
        <val v="0.0452309"/>
        <val v="0.436362"/>
        <val v="4.02925e-05"/>
      </chem>
    </cell>
    <cell index="10" area="288.103" target_area="317.537" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="47"/>
      <node n="9"/>
      <node n="8"/>
      <node n="80"/>
      <node n="23"/>
      <node n="44"/>
      <node n="45"/>
      <node n="53"/>
      <node n="58"/>
      <node n="57"/>
      <node n="56"/>
      <wall w="4"/>
      <wall w="58"/>
      <wall w="5"/>
      <wall w="6"/>
      <wall w="13"/>
      <chem n="4">
        <val v="0.0268144"/>
        <val v="0.169879"/>
        <val v="0"/>
        <val v="0.887333"/>
      </chem>
    </cell>
    <cell index="11" area="274.989" target_area="329.912" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="12"/>
      <node n="5"/>
      <node n="87"/>
      <node n="24"/>
      <node n="29"/>
      <node n="30"/>
      <node n="59"/>
      <node n="64"/>
      <node n="63"/>
      <node n="62"/>
      <wall w="8"/>
      <wall w="97"/>
      <wall w="9"/>
      <wall w="10"/>
      <wall w="106"/>
      <chem n="4">
        <val v="0.0699577"/>
        <val v="0.549891"/>
        <val v="0.665986"/>
        <val v="7.01838e-05"/>
      </chem>
    </cell>
    <cell index="12" area="312.385" target_area="364.367" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="28"/>
      <node n="112"/>
      <node n="114"/>
      <node n="115"/>
      <node n="113"/>
      <node n="72"/>
      <node n="184"/>
      <node n="186"/>
      <node n="187"/>
      <node n="185"/>
      <wall w="29"/>
      <wall w="30"/>
      <wall w="31"/>
      <wall w="110"/>
      <chem n="4">
        <val v="0.00550437"/>
        <val v="0.160437"/>
        <val v="0.136799"/>
        <val v="5.50489e-06"/>
      </chem>
    </cell>
    <cell index="13" area="656.962" target_area="713.319" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="74"/>
      <node n="169"/>
      <node n="3"/>
      <node n="111"/>
      <node n="49"/>
      <node n="15"/>
      <node n="124"/>
      <node n="125"/>
      <node n="126"/>
      <node n="75"/>
      <wall w="12"/>
      <wall w="28"/>
      <wall w="49"/>
      <wall w="43"/>
      <wall w="44"/>
      <chem n="4">
        <val v="0.0425172"/>
        <val v="8.78054"/>
        <val v="4.40649"/>
        <val v="4.25389e-05"/>
      </chem>
    </cell>
    <cell index="14" area="648.799" target_area="712.882" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="152"/>
      <node n="78"/>
      <node n="76"/>
      <node n="21"/>
      <node n="19"/>
      <node n="66"/>
      <node n="116"/>
      <node n="118"/>
      <node n="119"/>
      <node n="117"/>
      <wall w="24"/>
      <wall w="34"/>
      <wall w="35"/>
      <wall w="36"/>
      <wall w="82"/>
      <chem n="4">
        <val v="0.0109019"/>
        <val v="1.5635"/>
        <val v="1.08144"/>
        <val v="1.09072e-05"/>
      </chem>
    </cell>
    <cell index="15" area="622.344" target_area="708.694" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="82"/>
      <node n="80"/>
      <node n="8"/>
      <node n="9"/>
      <node n="104"/>
      <node n="148"/>
      <node n="155"/>
      <node n="157"/>
      <node n="158"/>
      <node n="156"/>
      <wall w="78"/>
      <wall w="13"/>
      <wall w="73"/>
      <wall w="83"/>
      <wall w="84"/>
      <chem n="4">
        <val v="0.0306552"/>
        <val v="0.150414"/>
        <val v="0"/>
        <val v="0.887338"/>
      </chem>
    </cell>
    <cell index="16" area="656.778" target_area="710.007" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="160"/>
      <node n="85"/>
      <node n="84"/>
      <node n="67"/>
      <node n="91"/>
      <node n="16"/>
      <node n="68"/>
      <node n="155"/>
      <node n="148"/>
      <node n="150"/>
      <node n="149"/>
      <wall w="62"/>
      <wall w="17"/>
      <wall w="73"/>
      <wall w="74"/>
      <wall w="75"/>
      <wall w="88"/>
      <wall w="95"/>
      <chem n="4">
        <val v="0.0176033"/>
        <val v="0.01488"/>
        <val v="0"/>
        <val v="1.76099e-05"/>
      </chem>
    </cell>
    <cell index="17" area="335.608" target_area="370.398" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="167"/>
      <node n="100"/>
      <node n="65"/>
      <node n="106"/>
      <node n="107"/>
      <node n="105"/>
      <node n="90"/>
      <node n="180"/>
      <node n="182"/>
      <node n="183"/>
      <node n="181"/>
      <wall w="19"/>
      <wall w="20"/>
      <wall w="21"/>
      <wall w="105"/>
      <chem n="4">
        <val v="0.042715"/>
        <val v="0.227806"/>
        <val v="0.212526"/>
        <val v="4.30016e-05"/>
      </chem>
    </cell>
    <cell index="18" area="670.121" target_area="709.569" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="93"/>
      <node n="141"/>
      <node n="91"/>
      <node n="67"/>
      <node n="84"/>
      <node n="220"/>
      <node n="20"/>
      <node n="41"/>
      <node n="132"/>
      <node n="134"/>
      <node n="135"/>
      <node n="133"/>
      <wall w="15"/>
      <wall w="16"/>
      <wall w="93"/>
      <wall w="17"/>
      <wall w="51"/>
      <wall w="52"/>
      <wall w="65"/>
      <chem n="4">
        <val v="0.016769"/>
        <val v="0.0350941"/>
        <val v="0"/>
        <val v="0.88732"/>
      </chem>
    </cell>
    <cell index="19" area="662.788" target_area="707.632" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="95"/>
      <node n="1"/>
      <node n="217"/>
      <node n="139"/>
      <node n="2"/>
      <node n="219"/>
      <node n="99"/>
      <node n="144"/>
      <node n="146"/>
      <node n="147"/>
      <node n="145"/>
      <wall w="18"/>
      <wall w="27"/>
      <wall w="66"/>
      <wall w="67"/>
      <wall w="68"/>
      <chem n="4">
        <val v="0.00584084"/>
        <val v="0.328952"/>
        <val v="2.0381"/>
        <val v="5.84146e-06"/>
      </chem>
    </cell>
    <cell index="20" area="678.6" target_area="726.257" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="0"/>
      <node n="170"/>
      <node n="19"/>
      <node n="21"/>
      <node n="76"/>
      <node n="88"/>
      <node n="105"/>
      <node n="107"/>
      <node n="106"/>
      <node n="65"/>
      <node n="216"/>
      <wall w="21"/>
      <wall w="22"/>
      <wall w="23"/>
      <wall w="24"/>
      <wall w="81"/>
      <chem n="4">
        <val v="0.00952165"/>
        <val v="0.155234"/>
        <val v="0.120745"/>
        <val v="9.55298e-06"/>
      </chem>
    </cell>
    <cell index="21" area="670.836" target_area="719.819" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="219"/>
      <node n="2"/>
      <node n="50"/>
      <node n="13"/>
      <node n="173"/>
      <node n="3"/>
      <node n="169"/>
      <node n="74"/>
      <node n="110"/>
      <node n="109"/>
      <node n="99"/>
      <wall w="25"/>
      <wall w="26"/>
      <wall w="27"/>
      <wall w="28"/>
      <chem n="4">
        <val v="0.0177655"/>
        <val v="1.81145"/>
        <val v="2.23446"/>
        <val v="1.77697e-05"/>
      </chem>
    </cell>
    <cell index="22" area="325.711" target_area="364.867" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="136"/>
      <node n="70"/>
      <node n="113"/>
      <node n="115"/>
      <node n="114"/>
      <node n="112"/>
      <node n="176"/>
      <node n="178"/>
      <node n="179"/>
      <node n="177"/>
      <wall w="31"/>
      <wall w="32"/>
      <wall w="33"/>
      <wall w="59"/>
      <wall w="100"/>
      <wall w="101"/>
      <chem n="4">
        <val v="0.00275461"/>
        <val v="0.0418151"/>
        <val v="0.382066"/>
        <val v="2.75514e-06"/>
      </chem>
    </cell>
    <cell index="23" area="677.382" target_area="711.882" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="103"/>
      <node n="188"/>
      <node n="14"/>
      <node n="40"/>
      <node n="120"/>
      <node n="42"/>
      <node n="77"/>
      <node n="79"/>
      <node n="117"/>
      <node n="119"/>
      <node n="118"/>
      <node n="116"/>
      <wall w="36"/>
      <wall w="37"/>
      <wall w="38"/>
      <wall w="39"/>
      <wall w="42"/>
      <chem n="4">
        <val v="0.00327309"/>
        <val v="0.266958"/>
        <val v="1.89084"/>
        <val v="3.27371e-06"/>
      </chem>
    </cell>
    <cell index="24" area="659.923" target_area="709.132" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="40"/>
      <node n="26"/>
      <node n="51"/>
      <node n="221"/>
      <node n="95"/>
      <node n="145"/>
      <node n="97"/>
      <node n="121"/>
      <node n="123"/>
      <node n="122"/>
      <node n="120"/>
      <wall w="40"/>
      <wall w="41"/>
      <wall w="42"/>
      <wall w="72"/>
      <wall w="67"/>
      <chem n="4">
        <val v="0.00190878"/>
        <val v="2.0366"/>
        <val v="5.24913"/>
        <val v="0.887301"/>
      </chem>
    </cell>
    <cell index="25" area="662.749" target_area="712.319" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="102"/>
      <node n="128"/>
      <node n="48"/>
      <node n="17"/>
      <node n="140"/>
      <node n="39"/>
      <node n="73"/>
      <node n="75"/>
      <node n="126"/>
      <node n="125"/>
      <node n="124"/>
      <wall w="44"/>
      <wall w="45"/>
      <wall w="63"/>
      <wall w="46"/>
      <wall w="50"/>
      <wall w="60"/>
      <chem n="4">
        <val v="0.100437"/>
        <val v="0.0313532"/>
        <val v="0"/>
        <val v="0.000100522"/>
      </chem>
    </cell>
    <cell index="26" area="651.641" target_area="713.694" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="102"/>
      <node n="124"/>
      <node n="15"/>
      <node n="27"/>
      <node n="108"/>
      <node n="69"/>
      <node n="129"/>
      <node n="131"/>
      <node n="130"/>
      <node n="128"/>
      <wall w="47"/>
      <wall w="48"/>
      <wall w="49"/>
      <wall w="50"/>
      <wall w="111"/>
      <chem n="4">
        <val v="0.0220779"/>
        <val v="1.40203"/>
        <val v="1.70757"/>
        <val v="2.20837e-05"/>
      </chem>
    </cell>
    <cell index="27" area="624.6" target_area="708.569" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="96"/>
      <node n="11"/>
      <node n="10"/>
      <node n="37"/>
      <node n="92"/>
      <node n="94"/>
      <node n="133"/>
      <node n="135"/>
      <node n="134"/>
      <node n="132"/>
      <wall w="52"/>
      <wall w="53"/>
      <wall w="54"/>
      <wall w="71"/>
      <wall w="55"/>
      <chem n="4">
        <val v="0.0152663"/>
        <val v="0.134395"/>
        <val v="0"/>
        <val v="0.887318"/>
      </chem>
    </cell>
    <cell index="28" area="659.113" target_area="710.194" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="177"/>
      <node n="35"/>
      <node n="34"/>
      <node n="189"/>
      <node n="44"/>
      <node n="23"/>
      <node n="80"/>
      <node n="82"/>
      <node n="156"/>
      <node n="137"/>
      <node n="138"/>
      <node n="136"/>
      <wall w="56"/>
      <wall w="57"/>
      <wall w="58"/>
      <wall w="59"/>
      <wall w="87"/>
      <wall w="83"/>
      <wall w="104"/>
      <chem n="4">
        <val v="0.0166275"/>
        <val v="0.226037"/>
        <val v="0"/>
        <val v="0.88732"/>
      </chem>
    </cell>
    <cell index="29" area="632.531" target_area="708.069" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="17"/>
      <node n="174"/>
      <node n="81"/>
      <node n="18"/>
      <node n="16"/>
      <node n="91"/>
      <node n="141"/>
      <node n="143"/>
      <node n="142"/>
      <node n="140"/>
      <wall w="61"/>
      <wall w="62"/>
      <wall w="86"/>
      <wall w="63"/>
      <wall w="64"/>
      <wall w="65"/>
      <chem n="4">
        <val v="0.013226"/>
        <val v="0.0799368"/>
        <val v="0"/>
        <val v="0.887315"/>
      </chem>
    </cell>
    <cell index="30" area="640.457" target_area="706.632" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="37"/>
      <node n="10"/>
      <node n="11"/>
      <node n="96"/>
      <node n="98"/>
      <node n="121"/>
      <node n="97"/>
      <node n="145"/>
      <node n="147"/>
      <node n="146"/>
      <node n="144"/>
      <wall w="68"/>
      <wall w="69"/>
      <wall w="70"/>
      <wall w="71"/>
      <wall w="72"/>
      <chem n="4">
        <val v="0.021844"/>
        <val v="0.183648"/>
        <val v="0"/>
        <val v="2.18502e-05"/>
      </chem>
    </cell>
    <cell index="31" area="602.244" target_area="709.007" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="104"/>
      <node n="9"/>
      <node n="25"/>
      <node n="7"/>
      <node n="218"/>
      <node n="86"/>
      <node n="149"/>
      <node n="150"/>
      <node n="148"/>
      <wall w="75"/>
      <wall w="76"/>
      <wall w="77"/>
      <wall w="78"/>
      <chem n="4">
        <val v="0.0111042"/>
        <val v="0.0323733"/>
        <val v="0"/>
        <val v="1.11323e-05"/>
      </chem>
    </cell>
    <cell index="32" area="631.358" target_area="707.882" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="22"/>
      <node n="32"/>
      <node n="175"/>
      <node n="88"/>
      <node n="76"/>
      <node n="78"/>
      <node n="152"/>
      <node n="154"/>
      <node n="153"/>
      <node n="151"/>
      <wall w="79"/>
      <wall w="80"/>
      <wall w="81"/>
      <wall w="94"/>
      <wall w="82"/>
      <chem n="4">
        <val v="0.0026462"/>
        <val v="0.00538209"/>
        <val v="0"/>
        <val v="2.64782e-06"/>
      </chem>
    </cell>
    <cell index="33" area="616.964" target_area="707.694" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="68"/>
      <node n="16"/>
      <node n="18"/>
      <node n="81"/>
      <node n="83"/>
      <node n="137"/>
      <node n="156"/>
      <node n="158"/>
      <node n="157"/>
      <node n="155"/>
      <wall w="84"/>
      <wall w="85"/>
      <wall w="86"/>
      <wall w="87"/>
      <wall w="88"/>
      <chem n="4">
        <val v="0.0159511"/>
        <val v="0.0242701"/>
        <val v="0"/>
        <val v="0.887319"/>
      </chem>
    </cell>
    <cell index="34" area="651.021" target_area="708.507" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="32"/>
      <node n="22"/>
      <node n="151"/>
      <node n="20"/>
      <node n="220"/>
      <node n="84"/>
      <node n="85"/>
      <node n="160"/>
      <node n="162"/>
      <node n="161"/>
      <node n="159"/>
      <wall w="90"/>
      <wall w="91"/>
      <wall w="92"/>
      <wall w="93"/>
      <wall w="94"/>
      <wall w="95"/>
      <chem n="4">
        <val v="0.0179716"/>
        <val v="0.254389"/>
        <val v="0"/>
        <val v="1.79796e-05"/>
      </chem>
    </cell>
    <cell index="35" area="615.782" target_area="708.257" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="33"/>
      <node n="127"/>
      <node n="31"/>
      <node n="29"/>
      <node n="24"/>
      <node n="87"/>
      <node n="164"/>
      <node n="166"/>
      <node n="165"/>
      <node n="163"/>
      <wall w="96"/>
      <wall w="97"/>
      <wall w="98"/>
      <wall w="99"/>
      <wall w="107"/>
      <chem n="4">
        <val v="0.0187515"/>
        <val v="0.0227919"/>
        <val v="0"/>
        <val v="1.8861e-05"/>
      </chem>
    </cell>
    <cell index="36" area="312.808" target_area="363.867" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="101"/>
      <node n="172"/>
      <node n="6"/>
      <node n="34"/>
      <node n="35"/>
      <node n="177"/>
      <node n="179"/>
      <node n="178"/>
      <node n="176"/>
      <wall w="101"/>
      <wall w="102"/>
      <wall w="103"/>
      <wall w="104"/>
      <chem n="4">
        <val v="0.0045153"/>
        <val v="0.0972276"/>
        <val v="0.289897"/>
        <val v="4.51588e-06"/>
      </chem>
    </cell>
    <cell index="37" area="314.42" target_area="369.398" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="89"/>
      <node n="164"/>
      <node n="87"/>
      <node n="5"/>
      <node n="171"/>
      <node n="181"/>
      <node n="183"/>
      <node n="182"/>
      <node n="180"/>
      <wall w="105"/>
      <wall w="106"/>
      <wall w="107"/>
      <wall w="108"/>
      <wall w="109"/>
      <chem n="4">
        <val v="0.0771352"/>
        <val v="0.669175"/>
        <val v="0.62814"/>
        <val v="7.76324e-05"/>
      </chem>
    </cell>
    <cell index="38" area="307.276" target_area="363.367" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0">
      <node n="71"/>
      <node n="129"/>
      <node n="69"/>
      <node n="4"/>
      <node n="168"/>
      <node n="185"/>
      <node n="187"/>
      <node n="186"/>
      <node n="184"/>
      <wall w="110"/>
      <wall w="111"/>
      <wall w="112"/>
      <wall w="113"/>
      <chem n="4">
        <val v="0.00748309"/>
        <val v="0.132846"/>
        <val v="0.104895"/>
        <val v="7.48323e-06"/>
      </chem>
    </cell>
    <cell index="39" area="696.342" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="190"/>
      <node n="195"/>
      <node n="198"/>
      <node n="193"/>
      <wall w="114"/>
      <wall w="154"/>
      <wall w="118"/>
      <wall w="155"/>
      <chem n="4">
        <val v="1.54089e-08"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="40" area="752.83" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="193"/>
      <node n="198"/>
      <node n="197"/>
      <node n="192"/>
      <wall w="155"/>
      <wall w="119"/>
      <wall w="156"/>
      <wall w="115"/>
      <chem n="4">
        <val v="1.24291e-07"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="41" area="737.63" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="192"/>
      <node n="197"/>
      <node n="196"/>
      <node n="191"/>
      <wall w="116"/>
      <wall w="156"/>
      <wall w="120"/>
      <wall w="157"/>
      <chem n="4">
        <val v="6.71839e-07"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="42" area="580.2" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="191"/>
      <node n="196"/>
      <node n="199"/>
      <node n="194"/>
      <wall w="157"/>
      <wall w="121"/>
      <wall w="158"/>
      <wall w="117"/>
      <chem n="4">
        <val v="6.63673e-08"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="43" area="696.335" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="195"/>
      <node n="200"/>
      <node n="203"/>
      <node n="198"/>
      <wall w="149"/>
      <wall w="122"/>
      <wall w="150"/>
      <wall w="118"/>
      <chem n="4">
        <val v="0.000664134"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="44" area="752.822" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="198"/>
      <node n="203"/>
      <node n="202"/>
      <node n="197"/>
      <wall w="123"/>
      <wall w="151"/>
      <wall w="119"/>
      <wall w="150"/>
      <chem n="4">
        <val v="0.00495554"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="45" area="737.623" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="197"/>
      <node n="202"/>
      <node n="201"/>
      <node n="196"/>
      <wall w="151"/>
      <wall w="124"/>
      <wall w="152"/>
      <wall w="120"/>
      <chem n="4">
        <val v="0.0273391"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="46" area="580.194" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="196"/>
      <node n="201"/>
      <node n="204"/>
      <node n="199"/>
      <wall w="152"/>
      <wall w="125"/>
      <wall w="153"/>
      <wall w="121"/>
      <chem n="4">
        <val v="0.00343285"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="47" area="696.342" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="200"/>
      <node n="205"/>
      <node n="208"/>
      <node n="203"/>
      <wall w="144"/>
      <wall w="126"/>
      <wall w="145"/>
      <wall w="122"/>
      <chem n="4">
        <val v="0.0133918"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="48" area="752.83" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="203"/>
      <node n="208"/>
      <node n="207"/>
      <node n="202"/>
      <wall w="127"/>
      <wall w="146"/>
      <wall w="123"/>
      <wall w="145"/>
      <chem n="4">
        <val v="0.10669"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="49" area="737.63" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="202"/>
      <node n="207"/>
      <node n="206"/>
      <node n="201"/>
      <wall w="128"/>
      <wall w="147"/>
      <wall w="124"/>
      <wall w="146"/>
      <chem n="4">
        <val v="0.633218"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="50" area="580.2" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="201"/>
      <node n="206"/>
      <node n="209"/>
      <node n="204"/>
      <wall w="129"/>
      <wall w="148"/>
      <wall w="125"/>
      <wall w="147"/>
      <chem n="4">
        <val v="0.0793076"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="51" area="696.342" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="205"/>
      <node n="210"/>
      <node n="213"/>
      <node n="208"/>
      <wall w="130"/>
      <wall w="140"/>
      <wall w="126"/>
      <wall w="139"/>
      <chem n="4">
        <val v="0.236776"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="52" area="752.83" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="208"/>
      <node n="213"/>
      <node n="212"/>
      <node n="207"/>
      <wall w="131"/>
      <wall w="141"/>
      <wall w="127"/>
      <wall w="140"/>
      <chem n="4">
        <val v="1.70898"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="53" area="737.63" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="207"/>
      <node n="212"/>
      <node n="211"/>
      <node n="206"/>
      <wall w="132"/>
      <wall w="142"/>
      <wall w="128"/>
      <wall w="141"/>
      <chem n="4">
        <val v="10.526"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="54" area="580.2" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="206"/>
      <node n="211"/>
      <node n="214"/>
      <node n="209"/>
      <wall w="133"/>
      <wall w="143"/>
      <wall w="129"/>
      <wall w="142"/>
      <chem n="4">
        <val v="1.26541"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="55" area="688.738" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="210"/>
      <node n="62"/>
      <node n="63"/>
      <node n="64"/>
      <node n="59"/>
      <node n="213"/>
      <wall w="10"/>
      <wall w="135"/>
      <wall w="130"/>
      <wall w="134"/>
      <chem n="4">
        <val v="0.3367"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="56" area="742.952" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="213"/>
      <node n="59"/>
      <node n="61"/>
      <node n="60"/>
      <node n="56"/>
      <node n="212"/>
      <wall w="7"/>
      <wall w="136"/>
      <wall w="131"/>
      <wall w="135"/>
      <chem n="4">
        <val v="18.9757"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="57" area="726.283" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="212"/>
      <node n="56"/>
      <node n="57"/>
      <node n="58"/>
      <node n="53"/>
      <node n="211"/>
      <wall w="6"/>
      <wall w="137"/>
      <wall w="132"/>
      <wall w="136"/>
      <chem n="4">
        <val v="101.352"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <cell index="58" area="570.112" target_area="0" target_length="60" lambda_celllength="0" stiffness="0" fixed="true" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="SAM" div_counter="0">
      <node n="211"/>
      <node n="53"/>
      <node n="55"/>
      <node n="54"/>
      <node n="52"/>
      <node n="214"/>
      <wall w="3"/>
      <wall w="138"/>
      <wall w="133"/>
      <wall w="137"/>
      <chem n="4">
        <val v="9.00162"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </cell>
    <boundary_polygon index="-1" area="21844" target_area="1" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0">
      <node n="0"/>
      <node n="170"/>
      <node n="19"/>
      <node n="66"/>
      <node n="116"/>
      <node n="103"/>
      <node n="188"/>
      <node n="14"/>
      <node n="40"/>
      <node n="26"/>
      <node n="51"/>
      <node n="221"/>
      <node n="95"/>
      <node n="1"/>
      <node n="217"/>
      <node n="139"/>
      <node n="2"/>
      <node n="50"/>
      <node n="13"/>
      <node n="173"/>
      <node n="3"/>
      <node n="111"/>
      <node n="49"/>
      <node n="15"/>
      <node n="27"/>
      <node n="108"/>
      <node n="69"/>
      <node n="4"/>
      <node n="168"/>
      <node n="185"/>
      <node n="28"/>
      <node n="112"/>
      <node n="176"/>
      <node n="101"/>
      <node n="172"/>
      <node n="6"/>
      <node n="46"/>
      <node n="52"/>
      <node n="54"/>
      <node n="55"/>
      <node n="53"/>
      <node n="58"/>
      <node n="57"/>
      <node n="56"/>
      <node n="60"/>
      <node n="61"/>
      <node n="59"/>
      <node n="64"/>
      <node n="63"/>
      <node n="62"/>
      <node n="12"/>
      <node n="5"/>
      <node n="171"/>
      <node n="181"/>
      <node n="167"/>
      <node n="100"/>
      <node n="65"/>
      <node n="216"/>
      <wall w="8"/>
      <wall w="103"/>
      <wall w="18"/>
      <wall w="12"/>
      <wall w="23"/>
      <wall w="38"/>
      <wall w="2"/>
      <wall w="3"/>
      <wall w="6"/>
      <wall w="7"/>
      <wall w="10"/>
      <wall w="48"/>
      <wall w="26"/>
      <wall w="41"/>
      <wall w="19"/>
      <wall w="29"/>
      <wall w="34"/>
      <wall w="100"/>
      <wall w="109"/>
      <wall w="113"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </boundary_polygon>
  </cells>
  <walls n="159">
    <wall index="0" c1="2" c2="6" n1="70" n2="17" length="30.0548" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0171476"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0179042"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="1" c1="3" c2="8" n1="77" n2="41" length="21.7007" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00494032"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00249342"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="2" c1="9" c2="-1" n1="6" n2="52" length="15.6366" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="3" c1="58" c2="9" n1="53" n2="52" length="19.3401" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0107731"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="4" c1="10" c2="4" n1="56" n2="9" length="10.2258" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.479354"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0645129"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="5" c1="10" c2="9" n1="44" n2="53" length="12.6517" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0121992"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.145477"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="6" c1="57" c2="10" n1="56" n2="53" length="24.5878" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="2.92544"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="7" c1="56" c2="4" n1="59" n2="56" length="25.0944" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.107393"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="8" c1="11" c2="-1" n1="62" n2="5" length="16.05" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="9" c1="11" c2="4" n1="29" n2="59" length="12.4514" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.185011"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00484728"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="10" c1="55" c2="11" n1="62" n2="59" length="23.2115" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0050924"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="11" c1="1" c2="7" n1="92" n2="73" length="19.2385" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00678156"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00356843"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="12" c1="13" c2="-1" n1="3" n2="15" length="32.6864" viz_flux="0" wall_type="aux_source">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="13" c1="10" c2="15" n1="9" n2="80" length="20.8613" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.414095"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.66727"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="14" c1="4" c2="0" n1="31" n2="7" length="7.94734" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00169856"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0474795"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="15" c1="3" c2="18" n1="41" n2="20" length="11.1762" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00359466"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00143235"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="16" c1="8" c2="18" n1="132" n2="41" length="8.97593" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.278592"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0288115"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="17" c1="16" c2="18" n1="84" n2="91" length="17.6323" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0364165"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.143455"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="18" c1="19" c2="-1" n1="95" n2="2" length="39.3778" viz_flux="0" wall_type="aux_source">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="19" c1="17" c2="-1" n1="181" n2="65" length="26.2267" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="20" c1="5" c2="17" n1="180" n2="105" length="14.8512" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000440178"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00168404"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="21" c1="17" c2="20" n1="65" n2="105" length="19.5475" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0004981"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0032637"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="22" c1="5" c2="20" n1="105" n2="88" length="9.7064" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="8.14579e-05"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00379036"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="23" c1="20" c2="-1" n1="65" n2="19" length="38.3447" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="24" c1="20" c2="14" n1="19" n2="76" length="19.5568" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00719211"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.020473"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="25" c1="7" c2="21" n1="99" n2="74" length="25.2796" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00107461"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0504006"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="26" c1="21" c2="-1" n1="2" n2="3" length="40.1703" viz_flux="0" wall_type="aux_source">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="27" c1="19" c2="21" n1="2" n2="99" length="17.1889" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.555588"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.630436"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="28" c1="21" c2="13" n1="3" n2="74" length="18.324" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="2.0262"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.910247"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="29" c1="12" c2="-1" n1="185" n2="112" length="19.4608" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="30" c1="2" c2="12" n1="184" n2="113" length="13.9929" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000145447"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00255748"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="31" c1="12" c2="22" n1="112" n2="113" length="18.7705" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00361581"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00139788"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="32" c1="2" c2="22" n1="113" n2="70" length="7.09919" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000409375"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00262532"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="33" c1="22" c2="6" n1="136" n2="70" length="10.2599" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.27836"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0177896"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="34" c1="14" c2="-1" n1="19" n2="116" length="24.005" viz_flux="0" wall_type="aux_source">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="35" c1="3" c2="14" n1="152" n2="117" length="10.114" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000395754"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0162538"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="36" c1="14" c2="23" n1="116" n2="117" length="22.3847" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.302059"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.237401"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="37" c1="3" c2="23" n1="117" n2="77" length="16.9126" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000771946"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0102822"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="38" c1="23" c2="-1" n1="116" n2="40" length="38.7009" viz_flux="0" wall_type="aux_source">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="39" c1="23" c2="8" n1="120" n2="77" length="17.0102" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.644433"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00352719"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="40" c1="8" c2="24" n1="120" n2="121" length="22.3693" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0177437"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="9.51433"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="41" c1="24" c2="-1" n1="40" n2="95" length="42.0391" viz_flux="0" wall_type="aux_source">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="42" c1="23" c2="24" n1="40" n2="120" length="9.29493" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="2.69216"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.996082"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="43" c1="7" c2="13" n1="74" n2="75" length="10.5158" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00366897"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.185914"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="44" c1="13" c2="25" n1="124" n2="75" length="23.9716" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.540886"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00637379"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="45" c1="7" c2="25" n1="75" n2="73" length="9.93006" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000341948"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.000317871"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="46" c1="25" c2="2" n1="128" n2="17" length="16.8679" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000401812"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.000617237"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="47" c1="2" c2="26" n1="128" n2="129" length="22.562" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0010276"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0461701"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="48" c1="26" c2="-1" n1="15" n2="69" length="33.9239" viz_flux="0" wall_type="aux_source">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="49" c1="13" c2="26" n1="15" n2="124" length="11.2958" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.678978"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="1.59919"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="50" c1="25" c2="26" n1="124" n2="128" length="18.2024" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00123235"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.103293"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="51" c1="1" c2="18" n1="141" n2="133" length="13.7587" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.330337"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.871577"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="52" c1="18" c2="27" n1="132" n2="133" length="25.197" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.250681"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="1.13353"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="53" c1="1" c2="27" n1="133" n2="92" length="19.6128" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.07063"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.813628"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="54" c1="27" c2="7" n1="37" n2="92" length="11.5945" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00475842"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00393499"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="55" c1="8" c2="27" n1="96" n2="132" length="10.9719" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.700802"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.107149"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="56" c1="6" c2="28" n1="136" n2="137" length="17.2801" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="1.7454"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.228269"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="57" c1="9" c2="28" n1="44" n2="34" length="17.6222" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.311713"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0419656"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="58" c1="10" c2="28" n1="80" n2="44" length="11.8935" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.191109"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="2.36135"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="59" c1="22" c2="28" n1="177" n2="136" length="8.19318" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.14609"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0108301"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="60" c1="1" c2="25" n1="73" n2="140" length="19.422" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0233689"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0197597"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="61" c1="1" c2="29" n1="140" n2="141" length="27.2197" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="1.63471"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.225345"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="62" c1="16" c2="29" n1="91" n2="16" length="10.0951" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.244864"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.276653"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="63" c1="29" c2="25" n1="140" n2="17" length="11.8032" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0209744"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0145847"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="64" c1="29" c2="6" n1="17" n2="81" length="19.6389" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="1.14877"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.101437"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="65" c1="29" c2="18" n1="91" n2="141" length="9.09414" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0445091"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.339048"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="66" c1="19" c2="7" n1="99" n2="144" length="9.47048" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0194782"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.000958074"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="67" c1="24" c2="19" n1="95" n2="145" length="9.13778" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="1.22834"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="2.55331"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="68" c1="19" c2="30" n1="144" n2="145" length="26.4811" viz_flux="0" wall_type="aux_source">
      <transporters1>
        <val v="0"/>
        <val v="0.635581"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0046549"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="69" c1="8" c2="30" n1="121" n2="96" length="17.1069" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.577837"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.57736"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="70" c1="30" c2="7" n1="144" n2="37" length="10.6485" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00447916"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00489133"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="71" c1="30" c2="27" n1="37" n2="96" length="26.6469" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.653048"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0967531"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="72" c1="24" c2="30" n1="145" n2="121" length="17.8433" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="8.72648"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0178367"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="73" c1="16" c2="15" n1="155" n2="148" length="8.36294" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0342813"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00669518"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="74" c1="0" c2="16" n1="160" n2="149" length="9.29529" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.012543"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0143636"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="75" c1="16" c2="31" n1="148" n2="149" length="17.5545" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00853197"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00711588"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="76" c1="0" c2="31" n1="149" n2="7" length="29.1936" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.011832"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00717236"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="77" c1="4" c2="31" n1="7" n2="9" length="22.6689" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00171426"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.015309"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="78" c1="31" c2="15" n1="148" n2="9" length="23.8374" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0710118"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0129407"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="79" c1="3" c2="32" n1="151" n2="152" length="24.57" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="1.81772e-05"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="4.43456e-05"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="80" c1="5" c2="32" n1="88" n2="32" length="20.6817" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="2.43312e-05"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.000143368"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="81" c1="20" c2="32" n1="76" n2="88" length="11.6649" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000594504"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="5.64825e-05"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="82" c1="32" c2="14" n1="76" n2="152" length="19.3547" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000370289"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00904852"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="83" c1="28" c2="15" n1="80" n2="156" length="19.1909" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="1.41164"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.563855"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="84" c1="15" c2="33" n1="155" n2="156" length="24.8735" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0890187"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.291421"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="85" c1="6" c2="33" n1="137" n2="81" length="20.5545" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.848836"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="1.22058"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="86" c1="29" c2="33" n1="81" n2="16" length="20.4948" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="1.3255"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.13954"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="87" c1="28" c2="33" n1="156" n2="137" length="10.4531" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.075299"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.551576"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="88" c1="16" c2="33" n1="16" n2="155" length="18.4156" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.111759"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0349653"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="89" c1="0" c2="5" n1="163" n2="159" length="8.92392" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00243266"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00206032"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="90" c1="0" c2="34" n1="159" n2="160" length="23.4013" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00791398"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0464994"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="91" c1="34" c2="3" n1="151" n2="20" length="11.1463" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000358387"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.000878894"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="92" c1="34" c2="5" n1="159" n2="32" length="8.89126" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00711874"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00160931"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="93" c1="34" c2="18" n1="20" n2="84" length="18.7757" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.041262"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.138342"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="94" c1="34" c2="32" n1="32" n2="151" length="19.6282" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000587131"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00186843"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="95" c1="34" c2="16" n1="84" n2="160" length="17.019" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0835219"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0413634"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="96" c1="5" c2="35" n1="163" n2="164" length="23.6682" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000615683"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.000337535"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="97" c1="11" c2="35" n1="87" n2="29" length="22.3595" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0046744"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00190837"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="98" c1="4" c2="35" n1="29" n2="31" length="8.13216" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00118705"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00962283"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="99" c1="0" c2="35" n1="31" n2="163" length="28.7868" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00411917"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00163811"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="100" c1="22" c2="-1" n1="112" n2="176" length="9.29946" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="101" c1="22" c2="36" n1="176" n2="177" length="18.2138" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.002658"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00176528"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="102" c1="9" c2="36" n1="34" n2="6" length="7.6864" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00329592"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00462693"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="103" c1="36" c2="-1" n1="176" n2="6" length="26.7279" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="104" c1="36" c2="28" n1="34" n2="177" length="16.7648" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.236365"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.0280984"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="105" c1="17" c2="37" n1="180" n2="181" length="16.1669" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00928072"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00699877"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="106" c1="11" c2="37" n1="5" n2="87" length="7.87713" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.020879"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.028869"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="107" c1="35" c2="37" n1="87" n2="164" length="10.4632" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00168279"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00602318"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="108" c1="5" c2="37" n1="164" n2="180" length="14.0546" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.00147375"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00298395"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="109" c1="37" c2="-1" n1="5" n2="181" length="19.7969" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="110" c1="12" c2="38" n1="184" n2="185" length="16.3695" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.000544085"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00172031"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="111" c1="26" c2="38" n1="69" n2="129" length="9.56969" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0.0209826"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00884542"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="112" c1="2" c2="38" n1="129" n2="184" length="14.6075" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="9.3504e-05"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0.00312045"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="113" c1="38" c2="-1" n1="69" n2="185" length="28.4682" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="114" c1="39" c2="-1" n1="193" n2="190" length="23.2114" viz_flux="0" wall_type="aux_sink">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="115" c1="40" c2="-1" n1="192" n2="193" length="25.0943" viz_flux="0" wall_type="aux_sink">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="116" c1="41" c2="-1" n1="191" n2="192" length="24.5877" viz_flux="0" wall_type="aux_sink">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="117" c1="42" c2="-1" n1="194" n2="191" length="19.34" viz_flux="0" wall_type="aux_sink">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="118" c1="43" c2="39" n1="198" n2="195" length="23.2114" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="119" c1="44" c2="40" n1="197" n2="198" length="25.0943" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="120" c1="45" c2="41" n1="196" n2="197" length="24.5877" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="121" c1="46" c2="42" n1="199" n2="196" length="19.34" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="122" c1="47" c2="43" n1="203" n2="200" length="23.2114" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="123" c1="48" c2="44" n1="202" n2="203" length="25.0943" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="124" c1="49" c2="45" n1="201" n2="202" length="24.5877" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="125" c1="50" c2="46" n1="204" n2="201" length="19.34" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="126" c1="51" c2="47" n1="208" n2="205" length="23.2114" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="127" c1="52" c2="48" n1="207" n2="208" length="25.0943" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="128" c1="53" c2="49" n1="206" n2="207" length="24.5877" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="129" c1="54" c2="50" n1="209" n2="206" length="19.34" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="130" c1="55" c2="51" n1="213" n2="210" length="23.2114" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="131" c1="56" c2="52" n1="212" n2="213" length="25.0943" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="132" c1="57" c2="53" n1="211" n2="212" length="24.5877" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="133" c1="58" c2="54" n1="214" n2="211" length="19.34" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="134" c1="55" c2="-1" n1="210" n2="62" length="29.7041" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="135" c1="56" c2="55" n1="213" n2="59" length="29.6407" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="136" c1="57" c2="56" n1="212" n2="56" length="29.5721" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="137" c1="58" c2="57" n1="211" n2="53" length="29.5049" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="138" c1="58" c2="-1" n1="52" n2="214" length="29.452" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="139" c1="51" c2="-1" n1="205" n2="210" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="140" c1="51" c2="52" n1="208" n2="213" length="76.4228" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="141" c1="53" c2="52" n1="207" n2="212" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="142" c1="54" c2="53" n1="206" n2="211" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="143" c1="54" c2="-1" n1="209" n2="214" length="68.68" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="144" c1="47" c2="-1" n1="200" n2="205" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="145" c1="48" c2="47" n1="203" n2="208" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="146" c1="49" c2="48" n1="202" n2="207" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="147" c1="50" c2="49" n1="201" n2="206" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="148" c1="50" c2="-1" n1="209" n2="204" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="149" c1="43" c2="-1" n1="195" n2="200" length="29.9997" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="150" c1="44" c2="43" n1="198" n2="203" length="29.9997" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="151" c1="45" c2="44" n1="197" n2="202" length="29.9997" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="152" c1="46" c2="45" n1="196" n2="201" length="29.9997" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="153" c1="46" c2="-1" n1="204" n2="199" length="29.9997" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="154" c1="39" c2="-1" n1="190" n2="195" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="155" c1="40" c2="39" n1="193" n2="198" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="156" c1="41" c2="40" n1="192" n2="197" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="157" c1="42" c2="41" n1="191" n2="196" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
    <wall index="158" c1="42" c2="-1" n1="199" n2="194" length="30" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
    </wall>
  </walls>
  <nodesets n="1">
    <nodeset>
      <node n="52"/>
      <node n="53"/>
      <node n="54"/>
      <node n="55"/>
      <node n="56"/>
      <node n="57"/>
      <node n="58"/>
      <node n="62"/>
      <node n="63"/>
      <node n="64"/>
      <node n="59"/>
      <node n="60"/>
      <node n="61"/>
      <node n="190"/>
      <node n="191"/>
      <node n="192"/>
      <node n="193"/>
      <node n="194"/>
      <node n="195"/>
      <node n="196"/>
      <node n="197"/>
      <node n="198"/>
      <node n="199"/>
      <node n="200"/>
      <node n="201"/>
      <node n="202"/>
      <node n="203"/>
      <node n="204"/>
      <node n="205"/>
      <node n="206"/>
      <node n="207"/>
      <node n="208"/>
      <node n="209"/>
      <node n="210"/>
      <node n="211"/>
      <node n="212"/>
      <node n="213"/>
      <node n="214"/>
    </nodeset>
  </nodesets>
  <settings>
    <setting name="show_cell_centers" val="false"/>
    <setting name="show_nodes" val="false"/>
    <setting name="show_node_numbers" val="false"/>
    <setting name="show_cell_numbers" val="false"/>
    <setting name="show_border_cells" val="true"/>
    <setting name="show_cell_axes" val="false"/>
    <setting name="show_cell_strain" val="false"/>
    <setting name="show_fluxes" val="true"/>
    <setting name="show_walls" val="true"/>
    <setting name="save_movie_frames" val="false"/>
    <setting name="show_only_leaf_boundary" val="false"/>
    <setting name="cell_growth" val="false"/>
    <setting name="hide_cells" val="false"/>
  </settings>
</leaf>
